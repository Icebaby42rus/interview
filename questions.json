{
  "html": [
    {
      "id": 1,
      "text": "Какие различия существуют между атрибутами 'data-' и 'aria-'?",
      "hasOptions": false,
      "answer": "Атрибуты 'data-' предназначены для хранения пользовательских данных в HTML и не оказывают влияния на семантику документа. Атрибуты 'aria-' используются для улучшения доступности и определения роли и состояния элементов для пользователей с ограниченными возможностями."
    },
    {
      "id": 2,
      "text": "Что такое Web-компоненты (Web Components) в HTML и какие основные технологии включает этот концепт?",
      "hasOptions": false,
      "answer": "Web-компоненты - это набор технологий, включая Shadow DOM, Custom Elements и HTML Templates, которые позволяют разработчикам создавать собственные переиспользуемые компоненты с сокрытием стилей и логики от внешнего мира."
    },
    {
      "id": 3,
      "text": "Как работает процесс разбора HTML документа браузером (HTML parsing), и что такое DOM?",
      "hasOptions": false,
      "answer": "HTML parsing - это процесс анализа и построения DOM (Document Object Model) из HTML кода. DOM представляет документ в виде иерархического дерева объектов, которое браузер использует для представления и взаимодействия с содержимым страницы."
    },
    {
      "id": 4,
      "text": "Какие преимущества и недостатки связаны с использованием таблиц (тег <table>) для верстки веб-страниц?",
      "hasOptions": false,
      "answer": "Использование таблиц для верстки считается плохой практикой, так как оно нарушает семантику и делает разметку менее адаптивной. Основное преимущество - возможность создания сложных структур данных, но это не является лучшим выбором для макета страниц."
    },
    {
      "id": 5,
      "text": "Что такое 'резиновый' (flexible) и 'жидкий' (fluid) дизайн в контексте веб-страниц?",
      "hasOptions": false,
      "answer": "'Резиновый' дизайн означает использование процентных значений для ширины элементов, чтобы они могли изменяться в зависимости от размера окна браузера. 'Жидкий' дизайн подразумевает адаптивную верстку, где элементы могут изменять размер, чтобы подходить разным устройствам и разрешениям экрана."
    },
    {
      "id": 6,
      "text": "Какие события браузера связаны с жизненным циклом элемента на веб-странице, и какие методы их обработки?",
      "hasOptions": false,
      "answer": "События, такие как 'DOMContentLoaded', 'load', 'unload', и 'beforeunload', связаны с жизненным циклом элемента. Для их обработки используются JavaScript-обработчики, например, 'addEventListener' для прослушивания событий."
    },
    {
      "id": 7,
      "text": "Что такое HTML5 Web Storage, и в чем разница между 'localStorage' и 'sessionStorage'?",
      "hasOptions": false,
      "answer": "HTML5 Web Storage предоставляет способ хранения данных на стороне клиента. 'localStorage' позволяет хранить данные, которые остаются после закрытия браузера, в то время как 'sessionStorage' хранит данные только на время сессии и удаляет их при закрытии вкладки или браузера."
    },
    {
      "id": 8,
      "text": "Что такое Cross-Origin Resource Sharing (CORS) в контексте запросов на внешние ресурсы в веб-приложениях?",
      "hasOptions": false,
      "answer": "CORS - это механизм, позволяющий веб-страницам запросить разрешение на доступ к ресурсам на другом домене. Это необходимо для безопасного взаимодействия между разными источниками данных на веб-странице."
    },
    {
      "id": 9,
      "text": "Что такое HTML5 Canvas, и какие возможности он предоставляет разработчикам?",
      "hasOptions": false,
      "answer": "HTML5 Canvas - это элемент HTML, который позволяет рисовать графику и создавать интерактивные изображения на веб-страницах с использованием JavaScript. Он предоставляет доступ к пикселям на холсте и позволяет создавать разнообразные графические приложения."
    },
    {
      "id": 10,
      "text": "Что такое HTML5-драг-и-дроп (Drag and Drop), и как его можно использовать для реализации перетаскивания элементов на веб-странице?",
      "hasOptions": false,
      "answer": "HTML5 Drag and Drop API позволяет пользователям перетаскивать элементы и выполнять определенные действия, такие как перемещение, копирование или перетаскивание данных. Разработчики могут использовать события API для обработки операций перетаскивания и изменения элементов на странице."
    },
    {
      "id": 11,
      "text": "Что такое SEO, и какие HTML-элементы и практики способствуют улучшению поисковой оптимизации веб-страниц?",
      "hasOptions": false,
      "answer": "SEO (Search Engine Optimization) - это процесс оптимизации веб-страниц для улучшения их видимости в поисковых результатах. HTML-элементы, такие как <title>, <meta>, <header>, <h1> - <h6>, а также уникальные и информативные тексты и качественные обратные ссылки могут способствовать улучшению SEO."
    },
    {
      "id": 12,
      "text": "Что такое рекурсивный алгоритм в контексте HTML, и какие примеры задач могут быть решены с его помощью?",
      "hasOptions": false,
      "answer": "Рекурсивный алгоритм - это алгоритм, который вызывает сам себя для решения задачи. В HTML рекурсия может быть использована для разбора и обхода DOM-дерева, например, при поиске элементов или изменении структуры документа."
    },
    {
      "id": 13,
      "text": "Какие особенности и преимущества предоставляет атрибут 'async' при загрузке внешних скриптов в HTML?",
      "hasOptions": false,
      "answer": "Атрибут 'async' позволяет браузеру загружать скрипты асинхронно, не блокируя параллельную загрузку ресурсов. Это увеличивает производительность, но может потребовать внимания к порядку выполнения скриптов."
    },
    {
      "id": 14,
      "text": "Что такое 'pre-rendering' (предварительный рендеринг) в HTML и как это может быть полезно для оптимизации веб-страницы?",
      "hasOptions": false,
      "answer": "'Pre-rendering' - это техника, при которой браузер предварительно рендерит (отображает) веб-страницу, даже до того как пользователь запросит её. Это может ускорить загрузку страницы, улучшить пользовательский опыт и снизить задержку."
    },
    {
      "id": 15,
      "text": "Какие HTML5-элементы и атрибуты используются для поддержки аудио и видео контента на веб-странице?",
      "hasOptions": false,
      "answer": "Для аудио и видео контента в HTML5 используются элементы <audio> и <video> соответственно. Дополнительные атрибуты, такие как 'src', 'controls', 'autoplay' и 'poster', позволяют управлять воспроизведением и отображением медиаконтента."
    },
    {
      "id": 16,
      "text": "Какие принципы адаптивного (responsive) дизайна в HTML и CSS и какие методы позволяют создать адаптивные веб-страницы?",
      "hasOptions": false,
      "answer": "Адаптивный дизайн основан на принципе создания веб-страниц, которые могут адаптироваться к различным размерам экранов. Методы включают в себя использование медиа-запросов (media queries), относительных единиц измерения (например, процентов), и гибких сеток."
    },
    {
      "id": 18,
      "text": "Что такое WebSockets, и как они используются для создания интерактивных приложений в реальном времени?",
      "hasOptions": false,
      "answer": "WebSockets - это технология, позволяющая браузеру и серверу устанавливать двунаправленное соединение, что позволяет создавать интерактивные приложения в реальном времени. Они поддерживают обмен данными между клиентом и сервером без необходимости постоянных запросов."
    },
    {
      "id": 19,
      "text": "Какие мета-теги могут использоваться для управления кэшированием и инструкций для поисковых систем?",
      "hasOptions": false,
      "answer": "Мета-теги, такие как 'Cache-Control', 'Expires', 'noindex', 'nofollow' и 'canonical', могут быть использованы для указания браузеру, как кэшировать ресурсы и для управления индексацией страниц поисковыми системами."
    },
    {
      "id": 20,
      "text": "Как работает механизм кросс-сайтовых запросов (Cross-Site Request Forgery, CSRF) и как его можно предотвратить в веб-приложениях?",
      "hasOptions": false,
      "answer": "CSRF - это атака, при которой злоумышленник отправляет запросы от имени аутентифицированного пользователя без его разрешения. Для предотвращения CSRF используются механизмы токенов и проверка источника (Origin) при запросах."
    },
    {
      "id": 21,
      "text": "Что такое 'DOCTYPE' в HTML, и какой его основной статус?",
      "hasOptions": false,
      "answer": "DOCTYPE - это инструкция для браузера, определяющая версию HTML, которую следует использовать."
    },
    {
      "id": 22,
      "text": "Какие спецификации включает HTML5?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "HTML, CSS, JavaScript", "isCorrect": false },
        { "id": 2, "text": "HTML, CSS, DOM, и API", "isCorrect": true },
        { "id": 3, "text": "HTML и PHP", "isCorrect": false },
        { "id": 4, "text": "HTML и SQL", "isCorrect": false }
      ]
    },
    {
      "id": 23,
      "text": "Что такое 'отзывчивый дизайн' (responsive design) в контексте веб-страниц?",
      "hasOptions": false,
      "answer": "это подход к разработке, который обеспечивает адаптацию веб-страницы к разным размерам экранов и устройствам."
    },
    {
      "id": 24,
      "text": "Что такое 'Cross-Origin Resource Sharing' (CORS) и как это влияет на запросы на внешние ресурсы в веб-приложениях?",
      "hasOptions": false,
      "answer": "CORS - это механизм, позволяющий веб-страницам запрашивать разрешение на доступ к ресурсам на другом домене, что необходимо для безопасного взаимодействия с разными источниками данных."
    },
    {
      "id": 25,
      "text": "Что такое 'рекурсивный атрибут' в HTML, и какие элементы могут иметь такие атрибуты?",
      "hasOptions": false,
      "answer": "Рекурсивный атрибут - это атрибут, который может быть использован внутри самого себя."
    },
    {
      "id": 26,
      "text": "Какой тег HTML используется для создания диалоговых окон и всплывающих подсказок?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<popup>", "isCorrect": false },
        { "id": 2, "text": "<dialog>", "isCorrect": true },
        { "id": 3, "text": "<tooltip>", "isCorrect": false },
        { "id": 4, "text": "<modal>", "isCorrect": false }
      ]
    },
    {
      "id": 27,
      "text": "Что такое 'WAI-ARIA' в контексте HTML и веб-доступности?",
      "hasOptions": false,
      "answer": "WAI-ARIA - это набор атрибутов и ролей, который позволяет улучшить доступность веб-приложений для пользователей с ограниченными возможностями."
    },
    {
      "id": 28,
      "text": "Как создать непронумерованный список в HTML?",
      "hasOptions": false,
      "answer": "Для создания такого списка в HTML используется тег <code>ul</code>, а для определения каждого пункта списка - тег <code>li</code>."
    },
    {
      "id": 29,
      "text": "Что такое HTML?",
      "hasOptions": false,
      "answer": "HTML (HyperText Markup Language) - это стандартизированный язык разметки, который используется для создания и разработки веб-страниц. Это система для разметки отдельных частей веб-страницы с использованием тегов, заключенных в угловые скобки."
    },
    {
      "id": 30,
      "text": "Что делает тег <!DOCTYPE>?",
      "hasOptions": false,
      "answer": "`Это декларация, которая информирует веб-браузер о версии языка разметки, использованной при создании веб-страницы. Это помогает браузеру корректно отобразить страницу."
    },
    {
      "id": 31,
      "text": "Что такое семантические теги в HTML?",
      "hasOptions": false,
      "answer": "Семантические теги в HTML - это теги, которые передают информацию о смысле или назначении содержимого, а не только о его внешнем виде. Примеры семантических тегов: header, footer, article, section, nav и др. Они помогают создавать более структурированные и доступные веб-страницы."
    },
    {
      "id": 32,
      "text": "Что делает атрибут 'readonly' в элементе формы?",
      "hasOptions": false,
      "answer": "Атрибут 'readonly' делает элемент формы только для чтения, что значит, что пользователь не может изменять значение элемента, но может просматривать его. Это может быть полезно, если вы хотите отобразить информацию, которая не должна быть изменена."
    },
    {
      "id": 33,
      "text": "Что такое веб-стандарты и зачем они нужны?",
      "hasOptions": false,
      "answer": "Веб-стандарты - это рекомендации, разработанные группами стандартов, такими как W3C или WHATWG, для обеспечения совместимости и устойчивости веб-технологий. Они включают рекомендации по HTML, CSS, JavaScript и другим веб-технологиям. Соблюдение веб-стандартов помогает обеспечить корректную работу веб-страниц в различных браузерах и устройствах, а также облегчить обслуживание и расширение веб-сайтов в будущем."
    },
    {
      "id": 34,
      "text": "Что такое отзывчивый (responsive) веб-дизайн?",
      "hasOptions": false,
      "answer": "Это подход к веб-дизайну, который позволяет веб-страницам корректно отображаться и функционировать на различных устройствах, включая мобильные телефоны, планшеты и настольные компьютеры, путем использования гибких макетов, гибких изображений и CSS медиазапросов для адаптации дизайна к различным размерам экрана и характеристикам устройств."
    },
    {
      "id": 35,
      "text": "Какой тег используется для создания упорядоченного списка?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<ul>", "isCorrect": false },
        { "id": 2, "text": "<ol>", "isCorrect": true },
        { "id": 3, "text": "<li>", "isCorrect": false },
        { "id": 4, "text": "<list>", "isCorrect": false }
      ]
    },
    {
      "id": 36,
      "text": "Что такое DOM в контексте веб-разработки?",
      "hasOptions": false,
      "answer": "DOM (Document Object Model) - это программный интерфейс для веб-документов. Это представление структурированного документа в виде объектной модели, которое позволяет программам и скриптам взаимодействовать с содержимым, структурой и стилями веб-страницы. DOM представляет документ как дерево объектов, каждый из которых соответствует части страницы."
    },
    {
      "id": 37,
      "text": "Что такое атрибут 'alt' в теге <img>?",
      "hasOptions": false,
      "answer": "Он используется для предоставления альтернативного текста, который будет отображаться в случае, если изображение не может быть загружено. Это также может быть полезно для обеспечения доступности, поскольку скрин-ридеры могут использовать этот текст для описания изображения пользователям с ограниченными возможностями."
    },
    {
      "id": 38,
      "text": "Что такое 'WebSockets' в контексте веб-разработки, и как они отличаются от HTTP-запросов?",
      "hasOptions": false,
      "answer": "WebSockets - это технология, позволяющая устанавливать двусторонние интерактивные соединения между браузером и сервером, в отличие от HTTP, которое подразумевает однонаправленные запросы и ответы."
    },
    {
      "id": 39,
      "text": "Что такое 'кэширование' веб-страниц, и какие преимущества оно может предоставить?",
      "hasOptions": false,
      "answer": "Кэширование - это процесс хранения копии веб-страницы на клиентской стороне, чтобы ускорить загрузку страницы в будущем."
    },
    {
      "id": 40,
      "text": "Что такое 'XSS' (межсайтовый скриптинг) и какие меры безопасности можно принять для защиты веб-приложений от этой угрозы?",
      "hasOptions": false,
      "answer": "XSS - это атака, при которой злоумышленник внедряет вредоносный JavaScript-код на веб-страницу, который выполняется в браузере пользователя."
    },
    {
      "id": 41,
      "text": "Что такое 'конфликт имен' (naming collisions) в контексте веб-разработки, и как этому можно предотвратить?",
      "hasOptions": false,
      "answer": "Конфликт имен - это ситуация, когда разные элементы на веб-странице имеют одинаковые имена, что может вызвать ошибки в JavaScript."
    },
    {
      "id": 42,
      "text": "Что такое 'компоненты' (components) в контексте веб-разработки, и какие преимущества они предоставляют при разработке многократно используемых интерфейсов?",
      "hasOptions": false,
      "answer": "Компоненты - это независимые и многократно используемые блоки кода, которые обеспечивают легкость сборки и обслуживания веб-интерфейсов."
    },
    {
      "id": 43,
      "text": "Что такое 'WebGL' и для чего он используется в веб-разработке?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "язык разметки для создания веб-страниц.", "isCorrect": false },
        { "id": 2, "text": "JavaScript API для создания 3D-графики в браузере.", "isCorrect": true },
        { "id": 3, "text": "плагин для воспроизведения мультимедийных файлов.", "isCorrect": false },
        { "id": 4, "text": "технология для создания анимаций на веб-страницах.", "isCorrect": false }
      ]
    },
    {
      "id": 44,
      "text": "Что такое 'Single Page Application' (SPA) и как оно отличается от традиционных многостраничных веб-приложений?",
      "hasOptions": false,
      "answer": "SPA - это тип веб-приложения, которое загружает одну веб-страницу и динамически обновляет контент, без полной перезагрузки страницы."
    },
    {
      "id": 45,
      "text": "Что такое 'ретинизация' (retina display) и как это влияет на разработку веб-графики?",
      "hasOptions": false,
      "answer": "Ретинизация - это высокоразрешенные дисплеи, которые могут отображать более четкую графику, и разработчики веб-сайтов должны создавать изображения с более высоким разрешением для них."
    },
    {
      "id": 46,
      "text": "Каким образом веб-компоненты (Web Components) улучшают модульность и переиспользуемость кода в веб-разработке?",
      "hasOptions": false,
      "answer": "Веб-компоненты - это набор технологий, позволяющих создавать собственные пользовательские элементы, которые могут быть многократно использованы и переиспользованы в разных проектах."
    },
    {
      "id": 47,
      "text": "Какие принципы 'подходящего для сенсорных экранов дизайна' (Touchscreen-Friendly Design) следует учитывать при разработке веб-приложений для мобильных устройств?",
      "hasOptions": false,
      "answer": "Для создания веб-приложений, удобных для сенсорных экранов, важно использовать достаточно большие элементы интерфейса, предоставлять пространство для жестов и избегать использования мелких текстов и элементов, которые трудно нажимать пальцем."
    },
    {
      "id": 48,
      "text": "Каким образом 'современные' или 'постоянные' соединения (HTTP/2 и HTTP/3) отличаются от классического HTTP/1.1, и какие преимущества они предоставляют?",
      "hasOptions": false,
      "answer": "HTTP/2 и HTTP/3 - это новые версии протокола HTTP, которые предоставляют множество улучшений, включая многопоточность, сжатие заголовков, приоритизацию запросов и улучшенную производительность. Они позволяют быстрее загружать веб-страницы, особенно на медленных соединениях и мобильных устройствах."
    },
    {
      "id": 49,
      "text": "Что такое 'реактивное программирование' (reactive programming) и какие библиотеки и фреймворки используются для его реализации в веб-разработке?",
      "hasOptions": false,
      "answer": "Реактивное программирование - это парадигма программирования, в которой данные и изменения данных обрабатываются как потоки событий. Для его реализации в веб-разработке часто используются библиотеки и фреймворки, такие как RxJS, React и Vue.js."
    },
    {
      "id": 50,
      "text": "Какие основные принципы 'оптимизации производительности' веб-приложений и веб-сайтов вы можете предложить, и как они влияют на пользовательский опыт?",
      "hasOptions": false,
      "answer": "Оптимизация производительности включает в себя сжатие и минимизацию ресурсов, асинхронную загрузку скриптов, кеширование, отложенную загрузку изображений и множество других методов для ускорения загрузки и реакции веб-приложений. Это улучшает пользовательский опыт, уменьшая задержки и обеспечивая более быстрое взаимодействие."
    },
    {
      "id": 51,
      "text": "Как можно обеспечить 'безопасность веб-приложений' и защиту от распространенных атак, таких как 'SQL-инъекции', 'кросс-сайтовые сценарии (XSS)' и 'межсайтовая подделка запроса (CSRF)'?",
      "hasOptions": false,
      "answer": "Для обеспечения безопасности веб-приложений важно проводить валидацию и санитизацию входных данных, использовать параметризованные запросы к базе данных, фильтровать и эскейпить вывод на веб-странице, использовать заголовки безопасности и генерировать уникальные токены для защиты от CSRF-атак."
    },
    {
      "id": 52,
      "text": "Что такое 'браузерное хранилище данных' (Web Storage), и какие методы доступа и сравнения с 'куками' (cookies) оно предоставляет?",
      "hasOptions": false,
      "answer": "Браузерное хранилище данных - это механизм для хранения данных на стороне клиента, без необходимости отправки их на сервер с каждым запросом. Оно предоставляет более простой и эффективный способ хранения данных в сравнении с куками, позволяя сохранять большие объемы данных и обеспечивая более быстрый доступ к ним."
    }
  ],
  "css": [
    {
      "id": 1,
      "text": "В чем разница между «сбросом» и «нормализацией» CSS? Что бы вы выбрали и почему?",
      "hasOptions": false,
      "answer": "Сброс (reset) сбрасывает все встроенные в браузер стили элементов. Normalize приводит стили к единому виду во всех браузерах. Лучше использовать Normalize из-за кроссбраузерности."
    },
    {
      "id": 2,
      "text": "Что такое специфичность селекторов CSS и как она работает?",
      "hasOptions": false,
      "answer": "Специфичность селектора (еще называют весом) это свойство определяющее приоритет стилевого правила, то есть то, какой стиль будет применен к HTML элементу в итоге. Например, используя какую-нибудь UI библиотеку, элементам этой библиотеки будут применены правила заданные авторами по умолчанию. При необходимости можно поменять стили на свои, «перебив» дефолтные более специфичным селектором.\n\nПодробнее тут: <a href='https://developer.mozilla.org/ru/docs/Web/CSS/Specificity' target='_blank'>Специфичность (MDN)</a>"
    },
    {
      "id": 3,
      "text": "Что такое CSS?",
      "hasOptions": false,
      "answer": "CSS (Cascading Style Sheets) - это язык стилей, используемый для описания внешнего вида и форматирования документа, написанного на языке разметки, таком как HTML. CSS позволяет разработчикам управлять макетом, шрифтами, цветами и другими стилистическими аспектами веб-страницы."
    },
    {
      "id": 4,
      "text": "Почему, как правило, лучше разместить подключение CSS в <head>, а <script> перед тэгом </body>? Знаете ли вы какие-либо исключения, приведите примеры?",
      "hasOptions": false,
      "answer": "Стили рекомендуется подключать в head для того, чтобы страница как можно быстрее приняла свой внешний вид. Скрипты подключенные в head могут затормозить этот процесс, в связи с этим их рекомендуется подключать перед закрывающим тегом body. Исключением являются скрипты аналитики, для определения количества посетителей, которые не дождались загрузки страницы. В этом случае скрипт должен быть подключен в head."
    },
    {
      "id": 5,
      "text": "Что делает свойство 'z-index' в CSS?",
      "hasOptions": false,
      "answer": "Свойство 'z-index' в CSS контролирует стековый порядок элементов по оси Z. Элемент с большим значением 'z-index' будет отображаться поверх элемента с меньшим значением 'z-index'."
    },
    {
      "id": 6,
      "text": "Какие есть способы отцентровать div?",
      "hasOptions": false,
      "answer": "Существует несколько способов отцентровать div в CSS, вот некоторые из них: \n1. Использование свойств margin и auto: `margin: 0 auto;`.\n2. Использование Flexbox: `display: flex; justify-content: center; align-items: center;`.\n3. Использование Grid Layout: `display: grid; place-items: center;`.\n4. Использование свойств text-align и inline-block: `text-align: center;` на родительском элементе и `display: inline-block;` на самом div.`."
    },
    {
      "id": 7,
      "text": "Что такое 'комбинаторы' в CSS, и какие виды комбинаторов существуют?",
      "hasOptions": false,
      "answer": "Комбинаторы - это специальные символы, которые определяют отношение между элементами в CSS-селекторе. В CSS существует несколько видов комбинаторов, включая пробел, '>', '+', '~' и ':'. Комбинаторы позволяют выбирать элементы в зависимости от их отношения к другим элементам."
    },
    {
      "id": 8,
      "text": "Что такое 'классификация специфичности' (specificity) в CSS, и как она влияет на приоритетность правил стилей?",
      "hasOptions": false,
      "answer": "Специфичность - это метод определения приоритетности CSS-правил. Она базируется на количестве элементов, классов и идентификаторов в селекторе. Чем более специфичен селектор, тем выше его приоритет. Специфичность используется для разрешения конфликтов между правилами и определения, какие стили будут применены к элементу."
    },
    {
      "id": 9,
      "text": "Как работает 'наследование стилей' (style inheritance) в CSS, и какие свойства обычно наследуются от родительских элементов?",
      "hasOptions": false,
      "answer": "Наследование стилей - это механизм, при котором дочерние элементы могут наследовать определенные стили от своих родительских элементов. Обычно наследуются свойства, относящиеся к тексту, такие как шрифт, размер текста, цвет и стиль. Однако, не все свойства наследуются, и наследование может быть переопределено внутренними стилями элемента."
    },
    {
      "id": 10,
      "text": "Что такое 'псевдоэлементы' (pseudo-elements) в CSS, и какие псевдоэлементы существуют?",
      "hasOptions": false,
      "answer": "Псевдоэлементы - это специальные селекторы в CSS, которые позволяют добавлять стили к определенным частям элемента. Некоторые из популярных псевдоэлементов включают '::before' и '::after' для добавления контента перед или после элемента, '::first-line' и '::first-letter' для стилизации первой строки или первой буквы текста, '::selection' для стилизации выделенного текста и другие."
    },
    {
      "id": 11,
      "text": "Что такое 'гибкая (резиновая) вёрстка' (flexible layout) в CSS, и какие свойства и контейнеры используются для создания гибких макетов?",
      "hasOptions": false,
      "answer": "Гибкая вёрстка - это методика создания веб-макетов, которые могут адаптироваться к разным размерам экранов и устройствам. Она основана на свойствах 'display: flex' и 'display: grid', а также на свойствах, таких как 'flex-grow', 'flex-shrink', 'flex-basis', 'grid-template-columns' и 'grid-template-rows'. Гибкая вёрстка позволяет легко создавать адаптивные макеты."
    },
    {
      "id": 12,
      "text": "Что такое 'префиксы браузеров' (browser prefixes) и для чего они используются в CSS?",
      "hasOptions": false,
      "answer": "Префиксы браузера - это дополнительные префиксы, добавляемые к CSS-свойствам, чтобы обеспечить совместимость с разными браузерами. Они используются для применения экспериментальных или нестандартных свойств в браузерах, которые пока не поддерживают их без префиксов. Примеры префиксов включают '-webkit-', '-moz-', '-ms-' и '-o-'."
    },
    {
      "id": 13,
      "text": "Что такое 'каскадность' (cascading) в CSS, и какие приоритеты устанавливаются для стилей при разрешении конфликтов?",
      "hasOptions": false,
      "answer": "Каскадность - это процесс разрешения конфликтов между CSS-правилами. Приоритеты стилей определяются на основе специфичности селекторов, порядка в таблице стилей и важности стилей. Важность устанавливается с помощью ключевых слов, таких как '!important'. Если есть конфликт, браузер применяет стиль с более высокой специфичностью и/или важностью."
    },
    {
      "id": 14,
      "text": "Как работает 'анимация' (animation) в CSS, и какие свойства и ключевые кадры используются для создания анимированных эффектов?",
      "hasOptions": false,
      "answer": "Анимация - это способ создания движения и изменения веб-элементов с использованием CSS. Для создания анимации используются свойства 'animation-name', 'animation-duration', 'animation-timing-function', 'animation-iteration-count' и другие. Ключевые кадры определяют состояния элемента в разные моменты времени."
    },
    {
      "id": 15,
      "text": "Какие методы 'медиазапросов' (media queries) используются для создания адаптивных макетов в CSS, и как они работают?",
      "hasOptions": false,
      "answer": "Медиазапросы - это специальные инструкции CSS, которые позволяют применять стили в зависимости от характеристик устройства или экрана, таких как ширина и высота экрана, ориентация и плотность пикселей. Некоторые методы медиазапросов включают 'max-width', 'min-width', 'orientation' и другие."
    },
    {
      "id": 16,
      "text": "Как создать 'псевдоклассы' (pseudo-classes) в CSS, и для чего они обычно используются?",
      "hasOptions": false,
      "answer": "Псевдоклассы - это специальные селекторы в CSS, которые применяют стили к элементам в зависимости от их состояния или взаимодействия с пользователем. Например, ':hover' применяет стили при наведении курсора, а ':active' при активации элемента. Псевдоклассы используются для создания интерактивных стилей и состояний элементов."
    },
    {
      "id": 18,
      "text": "Какой селектор выбирает все элементы .child, которые являются непосредственными дочерними элементами .parent?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": ".parent + .child", "isCorrect": false },
        { "id": 2, "text": ".parent ~ .child", "isCorrect": false },
        { "id": 3, "text": ".parent > .child", "isCorrect": true },
        { "id": 4, "text": ".parent .child", "isCorrect": false }
      ]
    },
    {
      "id": 19,
      "text": "Какой селектор CSS выбирает все элементы, которые имеют указанный атрибут, начинающийся с определенной строки?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "[attr=value]", "isCorrect": false },
        { "id": 2, "text": "[attr~=value]", "isCorrect": false },
        { "id": 3, "text": "[attr|=value]", "isCorrect": false },
        { "id": 4, "text": "[attr^=value]", "isCorrect": true }
      ]
    },
    {
      "id": 20,
      "text": "Какой селектор CSS выбирает все элементы, которые имеют указанный атрибут, заканчивающийся определенной строкой?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "[attr=value]", "isCorrect": false },
        { "id": 2, "text": "[attr~=value]", "isCorrect": false },
        { "id": 3, "text": "[attr|=value]", "isCorrect": false },
        { "id": 4, "text": "[attr$=value]", "isCorrect": true }
      ]
    },
    {
      "id": 21,
      "text": "Что такое 'флексбокс' (Flexbox) в CSS, и какие свойства используются для создания гибких макетов?",
      "hasOptions": false,
      "answer": "Флексбокс - это модуль CSS, который предоставляет мощные инструменты для создания гибких и адаптивных макетов. Некоторые из основных свойств флексбокса включают 'display: flex', 'flex-direction', 'justify-content', 'align-items' и 'flex-grow'. Они позволяют легко управлять распределением и выравниванием элементов в контейнере."
    },
    {
      "id": 22,
      "text": "Что такое 'псевдоэлемент ::before' и ::after' в CSS, и для чего они обычно используются?",
      "hasOptions": false,
      "answer": "Псевдоэлементы '::before' и '::after' позволяют добавлять дополнительное содержимое перед или после элемента на веб-странице. Они обычно используются для создания декоративных элементов, разделителей, иконок или специальных стилей, не добавляя дополнительных HTML-элементов в разметку."
    },
    {
      "id": 23,
      "text": "Как работает 'грид' (Grid) в CSS, и какие свойства используются для создания сетчатых макетов?",
      "hasOptions": false,
      "answer": "CSS Grid Layout - это модуль CSS, который позволяет создавать сложные сетчатые макеты с помощью свойств, таких как 'display: grid', 'grid-template-columns', 'grid-template-rows', 'grid-gap' и других. Он позволяет легко управлять расположением и размерами ячеек сетки."
    },
    {
      "id": 24,
      "text": "Что такое 'медиазапросы' (media queries) и как они используются для создания адаптивных макетов?",
      "hasOptions": false,
      "answer": "Медиазапросы - это инструкции CSS, которые позволяют применять стили в зависимости от характеристик экрана или устройства, таких как ширина экрана, ориентация и разрешение. Они используются для создания адаптивных макетов, которые могут адекватно отображаться на разных устройствах и разрешениях экранов."
    },
    {
      "id": 26,
      "text": "Что такое 'анимация ключевых кадров' (keyframe animation) в CSS, и какие свойства используются для создания сложных анимаций?",
      "hasOptions": false,
      "answer": "Анимация ключевых кадров - это методика создания сложных анимаций в CSS путем определения ключевых кадров и их состояний. Для создания анимаций ключевых кадров используются свойства 'animation-name', 'animation-duration', 'animation-timing-function', 'animation-iteration-count' и ключевые кадры с помощью '@keyframes'."
    },
    {
      "id": 27,
      "text": "Что такое 'генерация контента' (content generation) с помощью CSS, и как оно может быть применено?",
      "hasOptions": false,
      "answer": "Генерация контента - это способ добавления текста или контента к элементу в CSS с помощью свойства 'content'. Оно часто используется с псевдоэлементами '::before' и '::after' для создания дополнительных элементов или декорации. Генерация контента может быть применена для добавления иконок, чисел, маркеров и других элементов в дизайне."
    },
    {
      "id": 28,
      "text": "Как работает 'комбинатор ' ~' в CSS, и для чего он обычно используется?",
      "hasOptions": false,
      "answer": "Комбинатор ' ~' в CSS используется для выбора всех элементов, которые идут после указанного элемента, но находятся внутри того же родительского элемента. Он обычно используется для стилизации последующих элементов с теми же родительскими элементами, когда нет необходимости в точном совпадении селекторов."
    },
    {
      "id": 29,
      "text": "Что такое 'смешивание (blending)' в CSS, и какие свойства используются для настройки смешивания элементов?",
      "hasOptions": false,
      "answer": "Смешивание - это техника, позволяющая создавать сложные эффекты путем комбинирования цветов и элементов на веб-странице. Для настройки смешивания используются свойства 'mix-blend-mode' и 'background-blend-mode', которые определяют, как цвета и элементы будут взаимодействовать друг с другом."
    },
    {
      "id": 30,
      "text": "Что такое 'переменные CSS' (CSS variables) и как они могут быть использованы для упрощения стилизации веб-страниц?",
      "hasOptions": false,
      "answer": "Переменные CSS - это именованные значения, которые можно использовать повторно в стилях CSS. Они объявляются с помощью свойства 'var' и могут быть использованы для хранения цветов, размеров, отступов и других значений. Переменные упрощают стилизацию и обеспечивают ее легкость изменения."
    },
    {
      "id": 31,
      "text": "Что такое 'селекторы атрибутов' (attribute selectors) в CSS, и как они могут быть использованы?",
      "hasOptions": false,
      "answer": "Селекторы атрибутов - это часть CSS-селекторов, которая позволяет выбирать элементы на основе атрибутов и их значений. Например, '[data-attribute]' выберет элементы с определенным атрибутом, а '[data-attribute=value]' выберет элементы с конкретным значением атрибута. Селекторы атрибутов полезны для стилизации элементов, основанной на их атрибутах."
    },
    {
      "id": 32,
      "text": "Что такое 'контекстный селектор' (contextual selector) в CSS, и как он работает?",
      "hasOptions": false,
      "answer": "Контекстный селектор - это специальный вид селектора, который выбирает элементы в зависимости от их отношения к другим элементам внутри контекста. Например, 'parent > child' выберет 'child' только если он является прямым потомком 'parent'. Контекстные селекторы обеспечивают более точное управление стилями в определенных контекстах."
    },
    {
      "id": 33,
      "text": "Что такое 'свойство transform' в CSS, и как оно может быть использовано для преобразования элементов?",
      "hasOptions": false,
      "answer": "Свойство 'transform' в CSS используется для преобразования элементов, изменения их размера, положения и формы. Оно позволяет выполнять трансформации, такие как вращение, масштабирование, сдвиг и наклон элементов. Свойство 'transform' полезно для создания анимаций и визуальных эффектов."
    },
    {
      "id": 34,
      "text": "Что такое 'контекст стиля' (style context) в CSS, и какие правила влияют на стили элемента?",
      "hasOptions": false,
      "answer": "Контекст стиля - это набор правил CSS, который влияет на стили элемента. Этот набор правил включает в себя стили, определенные во внешних таблицах стилей (CSS-файлах), стили, определенные внутри элемента (встроенные стили), и стили, определенные с помощью атрибутов 'style'. Правила применяются в порядке приоритетности и наследования."
    },
    {
      "id": 35,
      "text": "Что такое 'создание градиента' (gradient) в CSS, и какие виды градиентов поддерживаются?",
      "hasOptions": false,
      "answer": "Создание градиента - это методика добавления плавного перехода между цветами или оттенками на фоне элемента. CSS поддерживает линейные и радиальные градиенты. Линейные градиенты могут быть вертикальными, горизонтальными или под углом, а радиальные градиенты имеют радиусный центр."
    },
    {
      "id": 36,
      "text": "Что такое 'свойство opacity' в CSS, и как оно влияет на прозрачность элементов?",
      "hasOptions": false,
      "answer": "Свойство 'opacity' в CSS определяет уровень прозрачности элемента. Значение 0 означает полную прозрачность, а значение 1 - полную непрозрачность. Значения между 0 и 1 определяют степень прозрачности элемента. Свойство 'opacity' влияет на видимость элемента и всех его дочерних элементов."
    },
    {
      "id": 37,
      "text": "Что такое 'селекторы потомков' (descendant selectors) в CSS, и как они работают?",
      "hasOptions": false,
      "answer": "Селекторы потомков - это часть CSS-селекторов, которые позволяют выбирать элементы, являющиеся потомками определенного элемента. Например, 'ancestor descendant' выберет элементы 'descendant', которые являются потомками элемента 'ancestor'. Селекторы потомков используются для стилизации конкретных элементов внутри других элементов."
    },
    {
      "id": 38,
      "text": "Что такое 'свойство overflow (переполнение)' в CSS, и как оно влияет на отображение содержимого в контейнерах?",
      "hasOptions": false,
      "answer": "Свойство 'overflow' в CSS определяет, как отображается содержимое, которое не помещается внутри контейнера. Оно может иметь значения 'visible' (по умолчанию), 'hidden', 'scroll' и 'auto'. 'visible' позволяет содержимому выходить за пределы контейнера, 'hidden' скрывает часть содержимого, а 'scroll' и 'auto' добавляют полосы прокрутки при необходимости."
    },
    {
      "id": 39,
      "text": "Что такое 'компоновка (layout)' в CSS, и какие методы используются для создания сложных макетов?",
      "hasOptions": false,
      "answer": "Компоновка - это процесс размещения и организации элементов на веб-странице. Для создания сложных макетов в CSS используются методы, такие как 'float', 'position', 'flexbox', 'grid' и 'сетчатые макеты'. Каждый из этих методов предоставляет уникальные возможности для макетирования и оформления страницы."
    },
    {
      "id": 40,
      "text": "Что такое 'свойство box-sizing' в CSS, и как оно влияет на размеры элементов в макете?",
      "hasOptions": false,
      "answer": "Свойство 'box-sizing' в CSS определяет, какие значения ширины и высоты элемента включают в себя границы и поля (padding). Оно может иметь значения 'content-box' (по умолчанию) и 'border-box'. 'content-box' учитывает только контент, а 'border-box' включает в себя границы и поля, что облегчает управление размерами элементов."
    },
    {
      "id": 41,
      "text": "Что такое 'методология БЭМ' (Block-Element-Modifier), и как она используется для структурирования CSS-кода?",
      "hasOptions": false,
      "answer": "Методология БЭМ - это способ организации CSS-кода, который основан на разделении структуры веб-страницы на блоки (blocks), элементы (elements) и модификаторы (modifiers). Это помогает создать чистую и поддерживаемую кодовую базу, упрощает совместную разработку и обеспечивает легкость стилизации элементов."
    },
    {
      "id": 42,
      "text": "Какой метод компоновки используется для создания гибких макетов в CSS?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Float", "isCorrect": false },
        { "id": 2, "text": "Flexbox", "isCorrect": true },
        { "id": 3, "text": "Position", "isCorrect": false },
        { "id": 4, "text": "Box-sizing", "isCorrect": false }
      ]
    },
    {
      "id": 43,
      "text": "Что такое 'псевдокласс' в CSS?",
      "hasOptions": false,
      "answer": "Селектор, который выбирает элементы в зависимости от их состояния или взаимодействия."
    },
    {
      "id": 44,
      "text": "Какое значение свойства 'box-sizing' включает в себя границы и поля элемента при расчете размеров?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "content-box", "isCorrect": false },
        { "id": 2, "text": "border-box", "isCorrect": true },
        { "id": 3, "text": "padding-box", "isCorrect": false },
        { "id": 4, "text": "margin-box", "isCorrect": false }
      ]
    },
    {
      "id": 45,
      "text": "Какое значение свойства 'overflow' добавляет полосы прокрутки при необходимости?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "visible", "isCorrect": false },
        { "id": 2, "text": "hidden", "isCorrect": false },
        { "id": 3, "text": "scroll", "isCorrect": true },
        { "id": 4, "text": "auto", "isCorrect": true }
      ]
    },
    {
      "id": 46,
      "text": "Как работает методология БЭМ в организации CSS-кода?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Она не используется в CSS", "isCorrect": false },
        { "id": 2, "text": "Она разделяет структуру веб-страницы на блоки, элементы и модификаторы", "isCorrect": true },
        { "id": 3, "text": "Она предоставляет только готовые CSS-стили", "isCorrect": false },
        { "id": 4, "text": "Она основана на использовании единой метки 'style'", "isCorrect": false }
      ]
    },
    {
      "id": 47,
      "text": "Какой селектор в CSS позволяет выбирать элементы на основе атрибутов и их значений?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Descendant selector", "isCorrect": false },
        { "id": 2, "text": "Pseudo-class", "isCorrect": false },
        { "id": 3, "text": "Attribute selector", "isCorrect": true },
        { "id": 4, "text": "Contextual selector", "isCorrect": false }
      ]
    },
    {
      "id": 48,
      "text": "Какой селектор в CSS выбирает элементы в зависимости от их отношения к другим элементам внутри контекста?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Descendant selector", "isCorrect": false },
        { "id": 2, "text": "Pseudo-class", "isCorrect": false },
        { "id": 3, "text": "Attribute selector", "isCorrect": false },
        { "id": 4, "text": "Contextual selector", "isCorrect": true }
      ]
    },
    {
      "id": 49,
      "text": "Какое свойство в CSS позволяет изменять размер, положение и форму элементов?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Opacity", "isCorrect": false },
        { "id": 2, "text": "Overflow", "isCorrect": false },
        { "id": 3, "text": "Transform", "isCorrect": true },
        { "id": 4, "text": "Blend mode", "isCorrect": false }
      ]
    },
    {
      "id": 50,
      "text": "Какие правила влияют на стили элемента в CSS?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Только стили, определенные внутри элемента", "isCorrect": false },
        { "id": 2, "text": "Только стили, определенные во внешних таблицах стилей", "isCorrect": false },
        { "id": 3, "text": "Строго в порядке наследования", "isCorrect": false },
        { "id": 4, "text": "Все вышеперечисленное", "isCorrect": true }
      ]
    },
    {
      "id": 51,
      "text": "Какие виды градиентов поддерживаются в CSS?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Только линейные градиенты", "isCorrect": false },
        { "id": 2, "text": "Только радиальные градиенты", "isCorrect": false },
        { "id": 3, "text": "Линейные и радиальные градиенты", "isCorrect": true },
        { "id": 4, "text": "Градиенты не поддерживаются в CSS", "isCorrect": false }
      ]
    },
    {
      "id": 52,
      "text": "Какой метод компоновки используется для создания двумерных макетов в CSS?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Float", "isCorrect": false },
        { "id": 2, "text": "Flexbox", "isCorrect": false },
        { "id": 3, "text": "Grid", "isCorrect": true },
        { "id": 4, "text": "Position", "isCorrect": false }
      ]
    },
    {
      "id": 53,
      "text": "Какой селектор в CSS выбирает элементы на основе их отношения к другим элементам внутри контекста?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Descendant selector", "isCorrect": false },
        { "id": 2, "text": "Pseudo-class", "isCorrect": false },
        { "id": 3, "text": "Attribute selector", "isCorrect": false },
        { "id": 4, "text": "Contextual selector", "isCorrect": true }
      ]
    },
    {
      "id": 54,
      "text": "Какой селектор в CSS позволяет выбирать все элементы, вложенные внутри другого элемента?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Descendant selector", "isCorrect": true },
        { "id": 2, "text": "Pseudo-class", "isCorrect": false },
        { "id": 3, "text": "Attribute selector", "isCorrect": false },
        { "id": 4, "text": "Contextual selector", "isCorrect": false }
      ]
    },
    {
      "id": 55,
      "text": "Какое свойство в CSS позволяет создавать градиентные фоны?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "background-color", "isCorrect": false },
        { "id": 2, "text": "color", "isCorrect": false },
        { "id": 3, "text": "gradient", "isCorrect": false },
        { "id": 4, "text": "background-image", "isCorrect": true }
      ]
    },
    {
      "id": 56,
      "text": "Какие виды градиентов поддерживаются в CSS?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Только линейные градиенты", "isCorrect": false },
        { "id": 2, "text": "Только радиальные градиенты", "isCorrect": false },
        { "id": 3, "text": "Линейные и радиальные градиенты", "isCorrect": true },
        { "id": 4, "text": "Градиенты не поддерживаются в CSS", "isCorrect": false }
      ]
    },
    {
      "id": 57,
      "text": "В каких случаях есть смысл использовать функцию translate() вместо абсолютного позиционирования и наоборот ? И почему?",
      "hasOptions": false,
      "answer": "В случае создания анимаций, использование 2D-трансформаций вместо абсолютного позиционирования обычно обеспечивает большую частоту кадров за счёт более быстрого рендеринга. Свойство position имеет большее отношение к вёрстке, а не к визуальным эффектам и анимации, поэтому абсолютное позиционирование лучше использовать при необходимости статически разместить контент."
    }
  ],
  "javascript": [
    {
      "id": 1,
      "text": "Что такое чистая функция?",
      "hasOptions": false,
      "answer": "Чистая функция (Pure function) - это функция в программировании, которая обладает следующими ключевыми свойствами:\n\n1. Идемпотентность: Вызов функции с одним и тем же набором входных данных всегда возвращает одинаковый результат, независимо от того, сколько раз её вызывают. Это означает, что чистая функция не имеет побочных эффектов, и она не изменяет состояние программы или внешних данных.\n\n2. Детерминированность: Результат выполнения чистой функции зависит только от её входных аргументов. Если функции передать один и тот же набор входных данных, она всегда вернет один и тот же результат.\n\n3. Отсутствие побочных эффектов: Чистая функция не взаимодействует с внешними данными, не изменяет глобальные переменные и не выполняет операции, которые могут повлиять на другие части программы. Она оперирует только своими аргументами и возвращает результат.\n\n Преимущества чистых функций:\n\n- Повышение читаемости кода: Чистые функции легче понимать, так как они зависят только от своих входных данных, их поведение предсказуемо и не требует анализа внешних факторов.\n\n- Тестирование: Чистые функции легко тестируются, так как можно предсказать результат на основе входных данных без необходимости имитации побочных эффектов.\n\n- Параллелизм: Использование чистых функций облегчает параллельное выполнение кода, так как они не зависят от глобальных состояний."
    },
    {
      "id": 2,
      "text": "Что такое замыкание?",
      "hasOptions": false,
      "answer": "Замыкание (closure) - это концепция в программировании, которая описывает способность функции сохранять доступ к переменным из внешней области видимости, в которой она была объявлена, даже после завершения выполнения этой функции. Замыкания позволяют функциям 'запоминать' окружающий контекст и использовать его в будущем.\n\nЗамыкания часто используются для создания и управления приватными переменными, а также для реализации функций обратного вызова и функционального программирования. Они играют важную роль в JavaScript и могут быть мощным инструментом при правильном использовании."
    },
    {
      "id": 3,
      "text": "let VS const: почему лучше использовать const, когда это возможно?",
      "hasOptions": false,
      "answer": "Использование const дает два преимущества:\n1) Безопасность: объявление переменных через const защищает от неожиданного изменения значения переменной в коде, что может часто приводит к ошибкам и неожиданному поведению программы.\n2) Читаемость: использование const позволяет читателю кода понимать, что значение переменной не будет изменяться в течение выполнения программы. Это делает код более понятным и уменьшает возможность ошибок."
    },
    {
      "id": 4,
      "text": "Что такое промисы (Promises) в JavaScript?",
      "hasOptions": false,
      "answer": "Это механизм для управления асинхронными операциями и обработки их результатов. Они представляют собой объекты, которые предоставляют структурированный способ работы с асинхронными операциями, такими как выполнение сетевых запросов, чтение файлов, обработка событий и другие. Они могут находиться в одном из трех состояний: ожидание (pending), выполнено (fulfilled) или отклонено (rejected). Промисы позволяют привязать обработчики к выполнению операции. Обработчики выполняются, когда операция завершается (выполнено или отклонено). Это делает их удобными для управления результатами и ошибками асинхронных операций."
    },
    {
      "id": 5,
      "text": "Что такое деструктуризация в JavaScript?",
      "hasOptions": false,
      "answer": "Это способ извлечения значений из структур данных, таких как объекты и массивы, и присвоения их переменным с использованием синтаксиса, который более компактен и выразителен. Деструктуризация упрощает доступ к элементам структур данных и позволяет избежать длинных цепочек обращений к свойствам объектов или элементам массивов."
    },
    {
      "id": 6,
      "text": "Что такое стрелочные функции в JavaScript?",
      "hasOptions": false,
      "answer": "Стрелочные функции (Arrow Functions) в JavaScript - это синтаксическое усовершенствование, которое предоставляет более краткий и удобный способ определения функций. Стрелочные функции введены в ECMAScript 6 (ES6) и стали популярным средством для определения анонимных функций в JavaScript. Основные особенности стрелочных функций:\n\n1. Сокращенный синтаксис: Стрелочные функции позволяют определять функции с более кратким синтаксисом, чем традиционные функции.\n\n2. Нет собственного this: Внутри стрелочных функций значение this привязано к контексту, в котором они были созданы, и не имеют своего собственного this. Это делает их удобными для использования внутри объектов и вложенных функций.\n\n2. Нет ключевого слова arguments: Стрелочные функции не имеют свойства arguments, которое присутствует у традиционных функций. Вы можете использовать оператор '...' (распространения) для передачи аргументов.\n\n Стрелочные функции особенно полезны для определения коротких анонимных функций, обработчиков событий и колбеков. Они сокращают объем кода и делают его более читаемым, но следует помнить, что они не подходят для всех сценариев, особенно когда требуется использование собственного this."
    },
    {
      "id": 7,
      "text": "Что такое hoisting в JavaScript?",
      "hasOptions": false,
      "answer": "Hoisting (поднятие) в JavaScript - это механизм, согласно которому объявления переменных и функций перемещаются в начало текущей области видимости перед выполнением кода. Это означает, что переменные и функции могут быть использованы до того, как они фактически были объявлены в коде. Однако, важно понимать, что только объявления 'поднимаются', а не присвоения значений переменным. \n\n Однако, следует помнить, что hoisting применяется только к объявлениям переменных и функций, а не к инициализации (присвоению значений). Если переменная объявлена без инициализации, её значение будет undefined до фактической инициализации. Также, при использовании let и const переменные считаются 'запертыми' (temporal dead zone) до фактического объявления, что предотвращает доступ к ним до момента их инициализации. Хотя hoisting может быть удобным, рекомендуется объявлять переменные и функции до их использования, чтобы улучшить читаемость кода и избежать потенциальных проблем, связанных с его интерпретацией."
    },
    {
      "id": 8,
      "text": "Какой метод используется для добавления элемента в массив?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "splice()", "isCorrect": false },
        { "id": 2, "text": "pop()", "isCorrect": false },
        { "id": 3, "text": "shift()", "isCorrect": false },
        { "id": 4, "text": "push()", "isCorrect": true }
      ]
    },
    {
      "id": 9,
      "text": "Какой объект представляет текущее окно браузера?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "document", "isCorrect": false },
        { "id": 2, "text": "screen", "isCorrect": false },
        { "id": 3, "text": "window", "isCorrect": true },
        { "id": 4, "text": "browser", "isCorrect": false }
      ]
    },
    {
      "id": 10,
      "text": "Какой метод используется для удаления последнего элемента из массива?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "splice()", "isCorrect": false },
        { "id": 2, "text": "pop()", "isCorrect": true },
        { "id": 3, "text": "shift()", "isCorrect": false },
        { "id": 4, "text": "push()", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Какой метод массива в JavaScript используется для фильтрации элементов по определенному критерию?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "map()", "isCorrect": false },
        { "id": 2, "text": "filter()", "isCorrect": true },
        { "id": 3, "text": "reduce()", "isCorrect": false },
        { "id": 4, "text": "forEach()", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Что такое JavaScript и для чего его используют?",
      "hasOptions": false,
      "answer": "JavaScript - это высокоуровневый язык программирования, используемый для создания интерактивных веб-сайтов. Он выполняется в браузере и позволяет добавлять динамическое поведение к веб-страницам."
    },
    {
      "id": 13,
      "text": "Что такое асинхронное программирование в JavaScript и какие механизмы используются для работы с асинхронными задачами?",
      "hasOptions": false,
      "answer": "Это подход к написанию кода, который позволяет выполнять задачи параллельно или неконтролируемо по времени, без блокирования основного потока выполнения программы. Это особенно полезно, когда необходимо обрабатывать задачи, которые могут занимать много времени, такие как загрузка данных из сети, выполнение длительных вычислений или обработка событий ввода пользователя, не блокируя интерфейс пользователя. Для работы с асинхронными задачами используются колбеки, промисы, асинхронные/ожидаемые функции (async/await) и события."
    },
    {
      "id": 14,
      "text": "Что такое JSON (JavaScript Object Notation) и какие типы данных поддерживает JSON?",
      "hasOptions": false,
      "answer": "JSON - это формат обмена данными, который основан на синтаксисе JavaScript. Он поддерживает строки, числа, логические значения, массивы, объекты и значения 'null'."
    },
    {
      "id": 15,
      "text": "Что такое DOM (Document Object Model) в контексте JavaScript?",
      "hasOptions": false,
      "answer": "DOM - это иерархическое представление веб-страницы, которое позволяет JavaScript взаимодействовать с элементами страницы. DOM представляет каждый элемент как объект, что позволяет изменять содержимое и структуру страницы динамически."
    },
    {
      "id": 16,
      "text": "Что такое обработчик события (event handler) и как его можно назначить элементу на веб-странице?",
      "hasOptions": false,
      "answer": "Обработчик события - это функция, вызываемая при наступлении определенного события, такого как клик мышью или нажатие клавиши. Его можно назначить элементу с помощью метода 'addEventListener' или в атрибуте HTML-элемента."
    },
    {
      "id": 17,
      "text": "Что такое RESTful API и как оно связано с JavaScript?",
      "hasOptions": false,
      "answer": "RESTful API (Representational State Transfer API) - это структурированный подход к проектированию и созданию веб-сервисов, который основан на принципах REST. REST - это архитектурный стиль, который описывает, как веб-ресурсы должны быть определены и манипулированы через HTTP-протокол. RESTful API обычно используется для создания веб-сервисов, которые предоставляют доступ к данным и функциональности удаленно через интернет."
    },
    {
      "id": 18,
      "text": "Что такое ES6 (ECMAScript 2015) и какие нововведения в нем по сравнению с предыдущими версиями JavaScript?",
      "hasOptions": false,
      "answer": "ES6, или ECMAScript 2015, - это стандарт JavaScript, который внес множество улучшений и новых возможностей, включая стрелочные функции, классы, блочные области видимости, модули, деструктуризацию, промисы и другие синтаксические и функциональные усовершенствования."
    },
    {
      "id": 11,
      "text": "Что такое переменные в JavaScript и как их объявлять?",
      "hasOptions": false,
      "answer": "Переменные - это именованные контейнеры для хранения данных. В JavaScript переменные объявляются с использованием ключевых слов 'var', 'let' или 'const'. 'var' устарел и обладает функциональной областью видимости, 'let' и 'const' имеют блочную область видимости. Например, 'let myVar = 10;' объявляет переменную 'myVar' со значением 10."
    },
    {
      "id": 12,
      "text": "Что такое функции (functions) в JavaScript и как их определять?",
      "hasOptions": false,
      "answer": "Функции - это блоки кода, которые могут быть вызваны в любое время. Они определяются с использованием ключевого слова 'function' и могут принимать аргументы."
    },
    {
      "id": 13,
      "text": "Что такое callback-функции в JavaScript и как их использовать?",
      "hasOptions": false,
      "answer": "Callback-функции - это функции, которые передаются как аргументы в другие функции и выполняются после завершения основной функции. Они часто используются в асинхронном программировании, например, при выполнении запросов к серверу."
    },
    {
      "id": 14,
      "text": "Что такое AJAX (Asynchronous JavaScript and XML) и как он используется для работы с сервером?",
      "hasOptions": false,
      "answer": "AJAX - это технология, которая позволяет обмениваться данными между браузером и сервером без перезагрузки страницы. Она использует асинхронные HTTP-запросы и может обновлять части страницы без полной перезагрузки, что делает веб-приложения более отзывчивыми."
    },
    {
      "id": 15,
      "text": "Что такое распространение события (Event Propagation)?",
      "hasOptions": false,
      "answer": "Распространение события (Event Propagation) в контексте веб-разработки относится к процессу передачи событий от источника (например, элемента веб-страницы) к обработчикам событий, которые могут быть прикреплены к различным элементам в этой веб-странице. Этот процесс включает в себя несколько этапов и взаимодействие между различными частями документа. Существует два основных метода распространения событий в веб-разработке: \n\n Всплытие (Bubbling): В этом методе событие сначала обрабатывается на самом глубоком (наименее вложенном) элементе, а затем поднимается по иерархии DOM-дерева к более внешним элементам, пока не достигнет самого верхнего уровня документа (document). На каждом этапе восходящего пути могут быть прикреплены обработчики событий, и они будут вызываться по очереди. Этот метод является наиболее распространенным в браузерах.\n\n Погружение (Capturing): В этом методе событие сначала обрабатывается на самом верхнем уровне документа (document) и затем опускается по иерархии DOM-дерева к наименее вложенным элементам. По пути событие также может вызывать обработчики событий. Этот метод реже используется в сравнении с всплытием и требует явного указания при добавлении обработчиков событий с использованием метода addEventListener с параметром useCapture. \n\n Важно понимать, что большинство событий в браузерах по умолчанию использует метод всплытия (bubbling). Это означает, что событие будет сначала обрабатываться на самом вложенном элементе, а затем подниматься к родительским элементам. Это может быть полезно для создания обработчиков событий, которые применяются к нескольким элементам иерархии DOM. Вы можете предотвратить дальнейшее распространение события, используя методы stopPropagation() (для отмены всплытия) или stopImmediatePropagation() (для остановки всплытия и предотвращения вызова других обработчиков на текущем элементе)."
    },
    {
      "id": 16,
      "text": "Что такое всплытие события?",
      "hasOptions": false,
      "answer": "Когда событие происходит в элементе DOM, оно затрагивает не только этот элемент. Событие «всплывает» (подобно пузырьку воздуха в воде), переходит от элемента, вызвавшего событие (event.target), к его родителю, затем поднимается еще выше, к родителю родителя элемента, пока не достигает объекта Window. Всплытие события позволяет создавать иерархические структуры обработчиков событий и обеспечивает удобство в обработке событий на родительских элементах, которые воздействуют на дочерние элементы. Это особенно полезно при работе с интерактивными элементами, такими как списки, меню, деревья и другие контейнеры."
    }, 
    {
      "id": 17,
      "text": "Что такое погружение события?",
      "hasOptions": false,
      "answer": "Когда событие происходит в элементе DOM, оно происходит не только в нем. В фазе погружения событие опускается от объекта Window до цели события через всех его предков. В JavaScript, чтобы использовать метод погружения, при добавлении обработчиков событий с использованием метода addEventListener, нужно передать третий аргумент true."
    },
    {
      "id": 18,
      "text": "Что такое область видимости (Scope)?",
      "hasOptions": false,
      "answer": "Область видимости — это место, где (или откуда) мы имеем доступ к переменным или функциям. JS имеем три типа областей видимости: глобальная, функциональная и блочная (ES6). Область видимости — это также набор правил, по которым осуществляется поиск переменной. Если переменной не существует в текущей области видимости, ее поиск производится выше, во внешней по отношению к текущей области видимости. Если и во внешней области видимости переменная отсутствует, ее поиск продолжается вплоть до глобальной области видимости. Если в глобальной области видимости переменная обнаружена, поиск прекращается, если нет — выбрасывается исключение. Поиск осуществляется по ближайшим к текущей областям видимости и останавливается с нахождением переменной. Это называется цепочкой областей видимости (Scope Chain)."
    },
    {
      "id": 19,
      "text": "Какое значение имеет this?",
      "hasOptions": false,
      "answer": "Значение ключевого слова this в JavaScript зависит от контекста, в котором оно используется. this указывает на текущий объект, к которому применяется в текущем контексте выполнения кода. Значение this может быть разным в различных ситуациях."
    },
    {
      "id": 20,
      "text": "Что такое функциональное программирование и какие особенности JS позволяют говорить о нем как о функциональном языке программирования?",
      "hasOptions": false,
      "answer": "Функциональное программирование (Functional Programming, FP) - это парадигма программирования, которая фокусируется на использовании функций как основных строительных блоков программы и на создании программ, которые оперируют с данными в виде неизменяемых структур. В функциональном программировании функции рассматриваются как 'первоклассные объекты', то есть они могут быть переданы как аргументы другим функциям, возвращены из других функций и сохранены в переменных."
    },
    {
      "id": 21,
      "text": "JavaScript синхронный или асинхронный и почему?",
      "hasOptions": false,
      "answer": "JavaScript - это мультипарадигменный язык программирования, который поддерживает как синхронное (последовательное) выполнение, так и асинхронное (параллельное) выполнение кода. Поддержка обоих режимов выполнения делает JavaScript очень гибким языком для разработки веб-приложений. JavaScript в большинстве случаев является однопоточным (с одним основным потоком выполнения), что означает, что он может выполнять только одну операцию за раз. Однако асинхронные механизмы позволяют создавать впечатление параллельного выполнения, что особенно полезно в веб-разработке, например, при обработке сетевых запросов или обновлении интерфейса без блокировки пользоватского ввода."
    },
    {
      "id": 22,
      "text": "Почему функции в JS называют объектами первого класса (First-class Objects)?",
      "hasOptions": false,
      "answer": "Функции называют объектами первого класса, потому что они обрабатываются также, как и любое другое значение в JS. Они могут присваиваться переменным, быть свойством объекта (методом), элементом массива, аргументом другой функции, значением, возвращаемым функцией. Единственным отличием функции от любого другого значения в JS является то, что функция может быть выполнена или вызвана."
    },
    {
      "id": 23,
      "text": "Что такое объект Set?",
      "hasOptions": false,
      "answer": "Это встроенная структура данных в JavaScript, представляющая собой коллекцию уникальных значений. Она позволяет хранить разнообразные типы данных, включая примитивы и объекты, и автоматически гарантирует, что каждое значение внутри набора уникально, то есть оно не может быть дублировано. Объект 'Set' был добавлен в стандарте ECMAScript 6 (ES6), и он предоставляет удобный способ управления уникальными значениями. 'Set' может быть полезным для решения задач, связанных с уникальными наборами данных, удалением дубликатов и проверкой наличия элементов. Он также предоставляет методы для добавления, удаления и проверки наличия элементов, а также операции объединения и пересечения наборов, что делает его удобным инструментом при работе с данными в JavaScript."
    },
    {
      "id": 24,
      "text": "Что такое функция обратного вызова (Callback Function)?",
      "hasOptions": false,
      "answer": "Функция обратного вызова — это функция, вызов которой отложен на будущее (происходит при некоторых условиях, например, при наступлении события)."
    },
    {
      "id": 25,
      "text": "Что такое async/await?",
      "hasOptions": false,
      "answer": "Async/await — это способ написания асинхронного (неблокирующего) кода в JS. Им оборачивают промис. Он делает код более читаемым и чистым, чем промисы и функции обратного вызова.\n\n Ключевое слово async используется перед объявлением функции и указывает, что функция будет асинхронной и будет возвращать промис. Она позволяет использовать оператор await внутри функции.\n\n Ключевое слово await используется внутри асинхронной функции для приостановки выполнения кода до тех пор, пока промис не будет разрешен. После разрешения промиса, await вернет его результат."
    },
    {
      "id": 26,
      "text": " В чем разница между spread-оператором и rest-оператором?",
      "hasOptions": false,
      "answer": "\n\n1) Spread-оператор (...): \n\n- Spread-оператор используется для распаковки элементов из массивов или объектов.\n\n- Он может быть использован для создания копии массива или объекта, а также для объединения значений из разных массивов или объектов.\n\n2) Rest-оператор (...): \n\n- Rest-оператор используется для сбора аргументов функции в массив (или параметров функции в объект).\n\n- Он позволяет функции принимать переменное количество аргументов, которые могут быть доступны как массив (или объект) внутри функции. \n\n Таким образом, spread-оператор используется для распаковки и объединения данных, а rest-оператор используется для сбора данных внутри функции."
    },
    {
      "id": 27,
      "text": "В чем разница между обычной функцией и функциональным выражением?",
      "hasOptions": false,
      "answer": "\n\n1) Объявление функции (Function Declaration):\n\n- Объявление функции - это способ определения функции с использованием ключевого слова function в начале строки кода.\n\n- Они могут быть вызваны перед тем, как они будут определены в коде (поднятие функции или 'hoisting'). \n\n2) Функциональное выражение (Function Expression):\n\n- Функциональное выражение - это способ определения функции, в котором функция присваивается переменной.\n\n- Они не могут быть вызваны до того, как они будут определены в коде, так как переменные в JavaScript поднимаются, но их значения остаются неопределенными.\n\n Основные различия между этими двумя способами:\n\n-Поднятие (hoisting): Объявления функций поднимаются вверх внутри области видимости, поэтому их можно вызвать до их фактического определения. Функциональные выражения не поднимаются, поэтому их можно вызывать только после их определения.\n\n-Имя функции: Объявления функций всегда имеют имя функции, которое можно использовать для рекурсивных вызовов или при отладке. В функциональных выражениях имя функции является опциональным.\n\n-Читаемость: Функциональные выражения могут быть более читаемыми, так как они могут быть определены в контексте и месте, где они будут использоваться, что упрощает понимание кода."
    },
    {
      "id": 28,
      "text": "В чем разница между обычной функцией и функциональным выражением?",
      "hasOptions": false,
      "answer": "\n\n1) Объявление функции (Function Declaration):\n\n- Объявление функции - это способ определения функции с использованием ключевого слова function в начале строки кода.\n\n- Они могут быть вызваны перед тем, как они будут определены в коде (поднятие функции или 'hoisting'). \n\n2) Функциональное выражение (Function Expression):\n\n- Функциональное выражение - это способ определения функции, в котором функция присваивается переменной.\n\n- Они не могут быть вызваны до того, как они будут определены в коде, так как переменные в JavaScript поднимаются, но их значения остаются неопределенными.\n\n Основные различия между этими двумя способами:\n\n-Поднятие (hoisting): Объявления функций поднимаются вверх внутри области видимости, поэтому их можно вызвать до их фактического определения. Функциональные выражения не поднимаются, поэтому их можно вызывать только после их определения.\n\n-Имя функции: Объявления функций всегда имеют имя функции, которое можно использовать для рекурсивных вызовов или при отладке. В функциональных выражениях имя функции является опциональным.\n\n-Читаемость: Функциональные выражения могут быть более читаемыми, так как они могут быть определены в контексте и месте, где они будут использоваться, что упрощает понимание кода."
    },
    {
      "id": 29,
      "text": "Для чего используется ключевое слово «new»?",
      "hasOptions": false,
      "answer": "Ключевое слово 'new' в JavaScript используется для создания новых экземпляров объектов из конструкторов (функций, предназначенных для создания объектов). Когда 'new' используется перед вызовом функции-конструктора, это приводит к следующим действиям:\n\n Создание нового пустого объекта.\n\n Связывание этого нового объекта с прототипом конструктора, что позволяет новому объекту наследовать свойства и методы, определенные в прототипе.\n\n Вызов конструктора с указанием нового объекта в качестве контекста выполнения (значения 'this'). Это позволяет конструктору инициализировать новый объект.\n\n Возврат созданного объекта из конструктора(Возвращает значение this, если не указано иное)."
    },
    {
      "id": 30,
      "text": "Что такое объект Map?",
      "hasOptions": false,
      "answer": "это встроенная структура данных в JavaScript, представляющая собой коллекцию ключей и связанных с ними значений. Основное отличие Map от объектов JavaScript в том, что ключи в Map могут быть любого типа данных, включая объекты и примитивы, и порядок ключей сохраняется. Map также обеспечивает более надежное и удобное хранение и поиск данных, чем обычные объекты. Основные характеристики объекта Map:\n\n- Уникальные ключи: Каждый ключ в объекте Map должен быть уникальным. Это означает, что нельзя иметь два одинаковых ключа в одном Map.\n\n- Итерируемость: Map является итерируемой структурой данных, что позволяет легко перебирать его элементы с использованием циклов.\n\n- Сохранение порядка: Порядок добавления элементов в Map сохраняется, что гарантирует, что элементы будут извлекаться в том порядке, в котором они были добавлены.\n\n- Разнообразные ключи: Ключи в Map могут быть различных типов данных, включая строки, числа, символы, объекты и другие."
    },
    {
      "id": 31,
      "text": "Что означает currying?",
      "hasOptions": false,
      "answer": "Это техника функционального программирования, которая заключается в преобразовании функции с несколькими аргументами в последовательность функций с одним аргументом. Каждая из этих функций возвращает новую функцию, принимающую следующий аргумент, и так далее, пока все аргументы не будут переданы. Когда все аргументы переданы, возвращается конечный результат. \n\n Преимущество currying в том, что она обеспечивает чрезвычайную гибкость и читаемость кода. Это позволяет легко создавать функции, которые могут быть частично применены к аргументам, а также комбинировать функции для создания новых функций."
    }
  ],
  "vue": [
    {
      "id": 1,
      "text": "Что такое реактивная переменная?",
      "hasOptions": false,
      "answer": "Это прокси-обертка над обычной, которая следит за её изменениями и регистрирует всех слушателей, которых надо оповестить об изменении переменной, чтобы они себя пересчитали."
    }
  ]
}
