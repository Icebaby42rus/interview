{
  "html": [
    {
      "id": 1,
      "text": "Какие различия существуют между атрибутами 'data-' и 'aria-'?",
      "hasOptions": false,
      "answer": "Атрибуты 'data-' предназначены для хранения пользовательских данных в HTML и не оказывают влияния на семантику документа. Атрибуты 'aria-' используются для улучшения доступности и определения роли и состояния элементов для пользователей с ограниченными возможностями."
    },
    {
      "id": 2,
      "text": "Что такое Web-компоненты (Web Components) в HTML и какие основные технологии включает этот концепт?",
      "hasOptions": false,
      "answer": "Web-компоненты - это набор технологий, включая Shadow DOM, Custom Elements и HTML Templates, которые позволяют разработчикам создавать собственные переиспользуемые компоненты с сокрытием стилей и логики от внешнего мира."
    },
    {
      "id": 3,
      "text": "Как работает процесс разбора HTML документа браузером (HTML parsing), и что такое DOM?",
      "hasOptions": false,
      "answer": "HTML parsing - это процесс анализа и построения DOM (Document Object Model) из HTML кода. DOM представляет документ в виде иерархического дерева объектов, которое браузер использует для представления и взаимодействия с содержимым страницы."
    },
    {
      "id": 4,
      "text": "Какие преимущества и недостатки связаны с использованием таблиц (тег <table>) для верстки веб-страниц?",
      "hasOptions": false,
      "answer": "Использование таблиц для верстки считается плохой практикой, так как оно нарушает семантику и делает разметку менее адаптивной. Основное преимущество - возможность создания сложных структур данных, но это не является лучшим выбором для макета страниц."
    },
    {
      "id": 5,
      "text": "Что такое 'резиновый' (flexible) и 'жидкий' (fluid) дизайн в контексте веб-страниц?",
      "hasOptions": false,
      "answer": "'Резиновый' дизайн означает использование процентных значений для ширины элементов, чтобы они могли изменяться в зависимости от размера окна браузера. 'Жидкий' дизайн подразумевает адаптивную верстку, где элементы могут изменять размер, чтобы подходить разным устройствам и разрешениям экрана."
    },
    {
      "id": 6,
      "text": "Какие события браузера связаны с жизненным циклом элемента на веб-странице, и какие методы их обработки?",
      "hasOptions": false,
      "answer": "События, такие как 'DOMContentLoaded', 'load', 'unload', и 'beforeunload', связаны с жизненным циклом элемента. Для их обработки используются JavaScript-обработчики, например, 'addEventListener' для прослушивания событий."
    },
    {
      "id": 7,
      "text": "Что такое HTML5 Web Storage, и в чем разница между 'localStorage' и 'sessionStorage'?",
      "hasOptions": false,
      "answer": "HTML5 Web Storage предоставляет способ хранения данных на стороне клиента. 'localStorage' позволяет хранить данные, которые остаются после закрытия браузера, в то время как 'sessionStorage' хранит данные только на время сессии и удаляет их при закрытии вкладки или браузера."
    },
    {
      "id": 8,
      "text": "Что такое Cross-Origin Resource Sharing (CORS) в контексте запросов на внешние ресурсы в веб-приложениях?",
      "hasOptions": false,
      "answer": "CORS - это механизм, позволяющий веб-страницам запросить разрешение на доступ к ресурсам на другом домене. Это необходимо для безопасного взаимодействия между разными источниками данных на веб-странице."
    },
    {
      "id": 9,
      "text": "Что такое HTML5 Canvas, и какие возможности он предоставляет разработчикам?",
      "hasOptions": false,
      "answer": "HTML5 Canvas - это элемент HTML, который позволяет рисовать графику и создавать интерактивные изображения на веб-страницах с использованием JavaScript. Он предоставляет доступ к пикселям на холсте и позволяет создавать разнообразные графические приложения."
    },
    {
      "id": 10,
      "text": "Что такое HTML5-драг-и-дроп (Drag and Drop), и как его можно использовать для реализации перетаскивания элементов на веб-странице?",
      "hasOptions": false,
      "answer": "HTML5 Drag and Drop API позволяет пользователям перетаскивать элементы и выполнять определенные действия, такие как перемещение, копирование или перетаскивание данных. Разработчики могут использовать события API для обработки операций перетаскивания и изменения элементов на странице."
    },
    {
      "id": 11,
      "text": "Что такое SEO, и какие HTML-элементы и практики способствуют улучшению поисковой оптимизации веб-страниц?",
      "hasOptions": false,
      "answer": "SEO (Search Engine Optimization) - это процесс оптимизации веб-страниц для улучшения их видимости в поисковых результатах. HTML-элементы, такие как <title>, <meta>, <header>, <h1> - <h6>, а также уникальные и информативные тексты и качественные обратные ссылки могут способствовать улучшению SEO."
    },
    {
      "id": 12,
      "text": "Что такое рекурсивный алгоритм в контексте HTML, и какие примеры задач могут быть решены с его помощью?",
      "hasOptions": false,
      "answer": "Рекурсивный алгоритм - это алгоритм, который вызывает сам себя для решения задачи. В HTML рекурсия может быть использована для разбора и обхода DOM-дерева, например, при поиске элементов или изменении структуры документа."
    },
    {
      "id": 13,
      "text": "Какие особенности и преимущества предоставляет атрибут 'async' при загрузке внешних скриптов в HTML?",
      "hasOptions": false,
      "answer": "Атрибут 'async' позволяет браузеру загружать скрипты асинхронно, не блокируя параллельную загрузку ресурсов. Это увеличивает производительность, но может потребовать внимания к порядку выполнения скриптов."
    },
    {
      "id": 14,
      "text": "Что такое 'pre-rendering' (предварительный рендеринг) в HTML и как это может быть полезно для оптимизации веб-страницы?",
      "hasOptions": false,
      "answer": "'Pre-rendering' - это техника, при которой браузер предварительно рендерит (отображает) веб-страницу, даже до того как пользователь запросит её. Это может ускорить загрузку страницы, улучшить пользовательский опыт и снизить задержку."
    },
    {
      "id": 15,
      "text": "Какие HTML5-элементы и атрибуты используются для поддержки аудио и видео контента на веб-странице?",
      "hasOptions": false,
      "answer": "Для аудио и видео контента в HTML5 используются элементы <audio> и <video> соответственно. Дополнительные атрибуты, такие как 'src', 'controls', 'autoplay' и 'poster', позволяют управлять воспроизведением и отображением медиаконтента."
    },
    {
      "id": 16,
      "text": "Какие принципы адаптивного (responsive) дизайна в HTML и CSS и какие методы позволяют создать адаптивные веб-страницы?",
      "hasOptions": false,
      "answer": "Адаптивный дизайн основан на принципе создания веб-страниц, которые могут адаптироваться к различным размерам экранов. Методы включают в себя использование медиа-запросов (media queries), относительных единиц измерения (например, процентов), и гибких сеток."
    },
    {
      "id": 18,
      "text": "Что такое WebSockets, и как они используются для создания интерактивных приложений в реальном времени?",
      "hasOptions": false,
      "answer": "WebSockets - это технология, позволяющая браузеру и серверу устанавливать двунаправленное соединение, что позволяет создавать интерактивные приложения в реальном времени. Они поддерживают обмен данными между клиентом и сервером без необходимости постоянных запросов."
    },
    {
      "id": 19,
      "text": "Какие мета-теги могут использоваться для управления кэшированием и инструкций для поисковых систем?",
      "hasOptions": false,
      "answer": "Мета-теги, такие как 'Cache-Control', 'Expires', 'noindex', 'nofollow' и 'canonical', могут быть использованы для указания браузеру, как кэшировать ресурсы и для управления индексацией страниц поисковыми системами."
    },
    {
      "id": 20,
      "text": "Как работает механизм кросс-сайтовых запросов (Cross-Site Request Forgery, CSRF) и как его можно предотвратить в веб-приложениях?",
      "hasOptions": false,
      "answer": "CSRF - это атака, при которой злоумышленник отправляет запросы от имени аутентифицированного пользователя без его разрешения. Для предотвращения CSRF используются механизмы токенов и проверка источника (Origin) при запросах."
    },
    {
      "id": 21,
      "text": "Что такое 'DOCTYPE' в HTML, и какой его основной статус?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "DOCTYPE - это сокращение 'Document Type', и он определяет структуру документа.", "isCorrect": false },
        { "id": 2, "text": "DOCTYPE - это инструкция для браузера, определяющая версию HTML, которую следует использовать.", "isCorrect": true },
        { "id": 3, "text": "DOCTYPE - это атрибут элемента, который определяет тип содержимого.", "isCorrect": false },
        { "id": 4, "text": "DOCTYPE - это тег для создания таблиц в HTML.", "isCorrect": false }
      ]
    },
    {
      "id": 22,
      "text": "Какие спецификации включает HTML5?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "HTML, CSS, JavaScript", "isCorrect": false },
        { "id": 2, "text": "HTML, CSS, DOM, и API", "isCorrect": true },
        { "id": 3, "text": "HTML и PHP", "isCorrect": false },
        { "id": 4, "text": "HTML и SQL", "isCorrect": false }
      ]
    },
    {
      "id": 23,
      "text": "Что такое 'отзывчивый дизайн' (responsive design) в контексте веб-страниц?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "отзывчивый дизайн - это использование большого количества изображений на веб-странице.", "isCorrect": false },
        { "id": 2, "text": "отзывчивый дизайн - это подход к разработке, который обеспечивает адаптацию веб-страницы к разным размерам экранов и устройствам.", "isCorrect": true },
        { "id": 3, "text": "отзывчивый дизайн - это способность веб-страницы реагировать на запросы пользователей.", "isCorrect": false },
        { "id": 4, "text": "отзывчивый дизайн - это синоним адаптивного дизайна.", "isCorrect": false }
      ]
    },
    {
      "id": 24,
      "text": "Что такое 'Cross-Origin Resource Sharing' (CORS) и как это влияет на запросы на внешние ресурсы в веб-приложениях?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "CORS - это техника шифрования данных между клиентом и сервером.", "isCorrect": false },
        { "id": 2, "text": "CORS - это механизм, позволяющий браузеру выполнять запросы на внешние ресурсы только при условии совпадения домена и протокола.", "isCorrect": false },
        { "id": 3, "text": "CORS - это механизм, позволяющий веб-страницам запрашивать разрешение на доступ к ресурсам на другом домене, что необходимо для безопасного взаимодействия с разными источниками данных.", "isCorrect": true },
        { "id": 4, "text": "CORS - это технология, позволяющая браузерам выполнять только локальные запросы к серверу.", "isCorrect": false }
      ]
    },
    {
      "id": 25,
      "text": "Что такое 'рекурсивный атрибут' в HTML, и какие элементы могут иметь такие атрибуты?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Рекурсивный атрибут - это атрибут, который может быть применен только к элементам форм.", "isCorrect": false },
        { "id": 2, "text": "Рекурсивный атрибут - это атрибут, который может быть использован внутри самого себя.", "isCorrect": true },
        { "id": 3, "text": "Рекурсивный атрибут - это атрибут, который автоматически применяется ко всем элементам на странице.", "isCorrect": false },
        { "id": 4, "text": "Рекурсивный атрибут - это атрибут, который необходим для структурирования HTML-документов.", "isCorrect": false }
      ]
    },
    {
      "id": 26,
      "text": "Какой тег HTML используется для создания диалоговых окон и всплывающих подсказок?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<popup>", "isCorrect": false },
        { "id": 2, "text": "<dialog>", "isCorrect": true },
        { "id": 3, "text": "<tooltip>", "isCorrect": false },
        { "id": 4, "text": "<modal>", "isCorrect": false }
      ]
    },
    {
      "id": 27,
      "text": "Что такое 'WAI-ARIA' в контексте HTML и веб-доступности?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "WAI-ARIA - это язык программирования для разработки веб-приложений.", "isCorrect": false },
        { "id": 2, "text": "WAI-ARIA - это набор атрибутов и ролей, который позволяет улучшить доступность веб-приложений для пользователей с ограниченными возможностями.", "isCorrect": true },
        { "id": 3, "text": "WAI-ARIA - это стандарт для создания анимаций на веб-страницах.", "isCorrect": false },
        { "id": 4, "text": "WAI-ARIA - это атрибуты для управления кешированием ресурсов на веб-странице.", "isCorrect": false }
      ]
    },
    {
      "id": 28,
      "text": "Как создать непронумерованный список в HTML?",
      "hasOptions": false,
      "answer": "Для создания такого списка в HTML используется тег <code>ul</code>, а для определения каждого пункта списка - тег <code>li</code>."
    },
    {
      "id": 29,
      "text": "Что такое HTML?",
      "hasOptions": false,
      "answer": "HTML (HyperText Markup Language) - это стандартизированный язык разметки, который используется для создания и разработки веб-страниц. Это система для разметки отдельных частей веб-страницы с использованием тегов, заключенных в угловые скобки."
    },
    {
      "id": 30,
      "text": "Что делает тег <!DOCTYPE>?",
      "hasOptions": false,
      "answer": "`Это декларация, которая информирует веб-браузер о версии языка разметки, использованной при создании веб-страницы. Это помогает браузеру корректно отобразить страницу."
    },
    {
      "id": 31,
      "text": "Что такое семантические теги в HTML?",
      "hasOptions": false,
      "answer": "Семантические теги в HTML - это теги, которые передают информацию о смысле или назначении содержимого, а не только о его внешнем виде. Примеры семантических тегов: header, footer, article, section, nav и др. Они помогают создавать более структурированные и доступные веб-страницы."
    },
    {
      "id": 32,
      "text": "Что делает атрибут 'readonly' в элементе формы?",
      "hasOptions": false,
      "answer": "Атрибут 'readonly' делает элемент формы только для чтения, что значит, что пользователь не может изменять значение элемента, но может просматривать его. Это может быть полезно, если вы хотите отобразить информацию, которая не должна быть изменена."
    },
    {
      "id": 33,
      "text": "Что такое веб-стандарты и зачем они нужны?",
      "hasOptions": false,
      "answer": "Веб-стандарты - это рекомендации, разработанные группами стандартов, такими как W3C или WHATWG, для обеспечения совместимости и устойчивости веб-технологий. Они включают рекомендации по HTML, CSS, JavaScript и другим веб-технологиям. Соблюдение веб-стандартов помогает обеспечить корректную работу веб-страниц в различных браузерах и устройствах, а также облегчить обслуживание и расширение веб-сайтов в будущем."
    },
    {
      "id": 34,
      "text": "Что такое отзывчивый (responsive) веб-дизайн?",
      "hasOptions": false,
      "answer": "Это подход к веб-дизайну, который позволяет веб-страницам корректно отображаться и функционировать на различных устройствах, включая мобильные телефоны, планшеты и настольные компьютеры, путем использования гибких макетов, гибких изображений и CSS медиазапросов для адаптации дизайна к различным размерам экрана и характеристикам устройств."
    },
    {
      "id": 35,
      "text": "Какой тег используется для создания упорядоченного списка?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<ul>", "isCorrect": false },
        { "id": 2, "text": "<ol>", "isCorrect": true },
        { "id": 3, "text": "<li>", "isCorrect": false },
        { "id": 4, "text": "<list>", "isCorrect": false }
      ]
    },
    {
      "id": 36,
      "text": "Что такое DOM в контексте веб-разработки?",
      "hasOptions": false,
      "answer": "DOM (Document Object Model) - это программный интерфейс для веб-документов. Это представление структурированного документа в виде объектной модели, которое позволяет программам и скриптам взаимодействовать с содержимым, структурой и стилями веб-страницы. DOM представляет документ как дерево объектов, каждый из которых соответствует части страницы."
    },
    {
      "id": 37,
      "text": "Что такое атрибут 'alt' в теге <img>?",
      "hasOptions": false,
      "answer": "Он используется для предоставления альтернативного текста, который будет отображаться в случае, если изображение не может быть загружено. Это также может быть полезно для обеспечения доступности, поскольку скрин-ридеры могут использовать этот текст для описания изображения пользователям с ограниченными возможностями."
    },
    {
      "id": 38,
      "text": "Что такое 'WebSockets' в контексте веб-разработки, и как они отличаются от HTTP-запросов?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "WebSockets - это протокол для передачи данных, который используется только для видео-стриминга.", "isCorrect": false },
        { "id": 2, "text": "WebSockets - это технология, позволяющая устанавливать двусторонние интерактивные соединения между браузером и сервером, в отличие от HTTP, которое подразумевает однонаправленные запросы и ответы.", "isCorrect": true },
        { "id": 3, "text": "WebSockets - это библиотека для создания анимаций на веб-страницах.", "isCorrect": false },
        { "id": 4, "text": "WebSockets - это новый браузерный движок для обработки JavaScript.", "isCorrect": false }
      ]
    },
    {
      "id": 39,
      "text": "Что такое 'кэширование' веб-страниц, и какие преимущества оно может предоставить?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Кэширование - это процесс хранения копии веб-страницы на клиентской стороне, чтобы ускорить загрузку страницы в будущем.", "isCorrect": true },
        { "id": 2, "text": "Кэширование - это процесс защиты веб-страницы от несанкционированного доступа.", "isCorrect": false },
        { "id": 3, "text": "Кэширование - это процесс шифрования данных, передаваемых между клиентом и сервером.", "isCorrect": false },
        { "id": 4, "text": "Кэширование - это процесс определения цветовой схемы веб-страницы.", "isCorrect": false }
      ]
    },
    {
      "id": 40,
      "text": "Что такое 'XSS' (межсайтовый скриптинг) и какие меры безопасности можно принять для защиты веб-приложений от этой угрозы?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "XSS - это сокращение от 'XML Secure Scripts', и это обязательная мера безопасности для веб-приложений.", "isCorrect": false },
        { "id": 2, "text": "XSS - это атака, при которой злоумышленник внедряет вредоносный JavaScript-код на веб-страницу, который выполняется в браузере пользователя.", "isCorrect": true },
        { "id": 3, "text": "XSS - это способ защиты от CSRF-атак на веб-приложения.", "isCorrect": false },
        { "id": 4, "text": "XSS - это механизм проверки безопасности веб-страниц.", "isCorrect": false }
      ]
    },
    {
      "id": 41,
      "text": "Что такое 'конфликт имен' (naming collisions) в контексте веб-разработки, и как этому можно предотвратить?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Конфликт имен - это ситуация, когда разные элементы на веб-странице имеют одинаковые имена, что может вызвать ошибки в JavaScript.", "isCorrect": true },
        { "id": 2, "text": "Конфликт имен - это метод обеспечения безопасности на сервере для предотвращения несанкционированного доступа к данным.", "isCorrect": false },
        { "id": 3, "text": "Конфликт имен - это атака на сервер, при которой злоумышленник пытается угнать данные.", "isCorrect": false },
        { "id": 4, "text": "Конфликт имен - это метод аутентификации пользователей в веб-приложениях.", "isCorrect": false }
      ]
    },
    {
      "id": 42,
      "text": "Что такое 'компоненты' (components) в контексте веб-разработки, и какие преимущества они предоставляют при разработке многократно используемых интерфейсов?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Компоненты - это части кода, которые нельзя переиспользовать в разных проектах.", "isCorrect": false },
        { "id": 2, "text": "Компоненты - это независимые и многократно используемые блоки кода, которые обеспечивают легкость сборки и обслуживания веб-интерфейсов.", "isCorrect": true },
        { "id": 3, "text": "Компоненты - это специфические браузерные плагины для расширения функциональности веб-страниц.", "isCorrect": false },
        { "id": 4, "text": "Компоненты - это атрибуты HTML для настройки стиля элементов интерфейса.", "isCorrect": false }
      ]
    },
    {
      "id": 43,
      "text": "Что такое 'WebGL' и для чего он используется в веб-разработке?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "WebGL - это язык разметки для создания веб-страниц.", "isCorrect": false },
        { "id": 2, "text": "WebGL - это JavaScript API для создания 3D-графики в браузере.", "isCorrect": true },
        { "id": 3, "text": "WebGL - это плагин для воспроизведения мультимедийных файлов.", "isCorrect": false },
        { "id": 4, "text": "WebGL - это технология для создания анимаций на веб-страницах.", "isCorrect": false }
      ]
    },
    {
      "id": 44,
      "text": "Что такое 'Single Page Application' (SPA) и как оно отличается от традиционных многостраничных веб-приложений?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "SPA - это методика создания веб-приложений, которая не использует структуру HTML-документов.", "isCorrect": false },
        { "id": 2, "text": "SPA - это тип веб-приложения, которое загружает одну веб-страницу и динамически обновляет контент, без полной перезагрузки страницы.", "isCorrect": true },
        { "id": 3, "text": "SPA - это стандартный способ разработки многостраничных веб-приложений.", "isCorrect": false },
        { "id": 4, "text": "SPA - это технология для создания анимаций на веб-страницах.", "isCorrect": false }
      ]
    },
    {
      "id": 45,
      "text": "Что такое 'ретинизация' (retina display) и как это влияет на разработку веб-графики?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Ретинизация - это технология для создания анимаций на веб-страницах.", "isCorrect": false },
        { "id": 2, "text": "Ретинизация - это высокоразрешенные дисплеи, которые могут отображать более четкую графику, и разработчики веб-сайтов должны создавать изображения с более высоким разрешением для них.", "isCorrect": true },
        { "id": 3, "text": "Ретинизация - это методика разработки адаптивных веб-сайтов.", "isCorrect": false },
        { "id": 4, "text": "Ретинизация - это технология для воспроизведения мультимедийных файлов.", "isCorrect": false }
      ]
    },
    {
      "id": 46,
      "text": "Каким образом веб-компоненты (Web Components) улучшают модульность и переиспользуемость кода в веб-разработке?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Веб-компоненты - это спецификации для создания веб-страниц с использованием модульного JavaScript.", "isCorrect": false },
        { "id": 2, "text": "Веб-компоненты - это набор технологий, позволяющих создавать собственные пользовательские элементы, которые могут быть многократно использованы и переиспользованы в разных проектах.", "isCorrect": true },
        { "id": 3, "text": "Веб-компоненты - это технология для создания анимаций на веб-страницах.", "isCorrect": false },
        { "id": 4, "text": "Веб-компоненты - это стандартный способ создания динамических веб-приложений.", "isCorrect": false }
      ]
    },
    {
      "id": 47,
      "text": "Какие принципы 'подходящего для сенсорных экранов дизайна' (Touchscreen-Friendly Design) следует учитывать при разработке веб-приложений для мобильных устройств?",
      "hasOptions": false,
      "answer": "Для создания веб-приложений, удобных для сенсорных экранов, важно использовать достаточно большие элементы интерфейса, предоставлять пространство для жестов и избегать использования мелких текстов и элементов, которые трудно нажимать пальцем."
    },
    {
      "id": 48,
      "text": "Каким образом 'современные' или 'постоянные' соединения (HTTP/2 и HTTP/3) отличаются от классического HTTP/1.1, и какие преимущества они предоставляют?",
      "hasOptions": false,
      "answer": "HTTP/2 и HTTP/3 - это новые версии протокола HTTP, которые предоставляют множество улучшений, включая многопоточность, сжатие заголовков, приоритизацию запросов и улучшенную производительность. Они позволяют быстрее загружать веб-страницы, особенно на медленных соединениях и мобильных устройствах."
    },
    {
      "id": 49,
      "text": "Что такое 'реактивное программирование' (reactive programming) и какие библиотеки и фреймворки используются для его реализации в веб-разработке?",
      "hasOptions": false,
      "answer": "Реактивное программирование - это парадигма программирования, в которой данные и изменения данных обрабатываются как потоки событий. Для его реализации в веб-разработке часто используются библиотеки и фреймворки, такие как RxJS, React и Vue.js."
    },
    {
      "id": 50,
      "text": "Какие основные принципы 'оптимизации производительности' веб-приложений и веб-сайтов вы можете предложить, и как они влияют на пользовательский опыт?",
      "hasOptions": false,
      "answer": "Оптимизация производительности включает в себя сжатие и минимизацию ресурсов, асинхронную загрузку скриптов, кеширование, отложенную загрузку изображений и множество других методов для ускорения загрузки и реакции веб-приложений. Это улучшает пользовательский опыт, уменьшая задержки и обеспечивая более быстрое взаимодействие."
    },
    {
      "id": 51,
      "text": "Как можно обеспечить 'безопасность веб-приложений' и защиту от распространенных атак, таких как 'SQL-инъекции', 'кросс-сайтовые сценарии (XSS)' и 'межсайтовая подделка запроса (CSRF)'?",
      "hasOptions": false,
      "answer": "Для обеспечения безопасности веб-приложений важно проводить валидацию и санитизацию входных данных, использовать параметризованные запросы к базе данных, фильтровать и эскейпить вывод на веб-странице, использовать заголовки безопасности и генерировать уникальные токены для защиты от CSRF-атак."
    },
    {
      "id": 52,
      "text": "Что такое 'браузерное хранилище данных' (Web Storage), и какие методы доступа и сравнения с 'куками' (cookies) оно предоставляет?",
      "hasOptions": false,
      "answer": "Браузерное хранилище данных - это механизм для хранения данных на стороне клиента, без необходимости отправки их на сервер с каждым запросом. Оно предоставляет более простой и эффективный способ хранения данных в сравнении с куками, позволяя сохранять большие объемы данных и обеспечивая более быстрый доступ к ним."
    }
  ],
  "css": [
    {
      "id": 1,
      "text": "В чем разница между «сбросом» и «нормализацией» CSS? Что бы вы выбрали и почему?",
      "hasOptions": false,
      "answer": "Сброс (reset) сбрасывает все встроенные в браузер стили элементов. Normalize приводит стили к единому виду во всех браузерах. Лучше использовать Normalize из-за кроссбраузерности."
    },
    {
      "id": 2,
      "text": "Что такое специфичность селекторов CSS и как она работает?",
      "hasOptions": false,
      "answer": "Специфичность селектора (еще называют весом) это свойство определяющее приоритет стилевого правила, то есть то, какой стиль будет применен к HTML элементу в итоге. Например, используя какую-нибудь UI библиотеку, элементам этой библиотеки будут применены правила заданные авторами по умолчанию. При необходимости можно поменять стили на свои, «перебив» дефолтные более специфичным селектором.\n\nПодробнее тут: <a href='https://developer.mozilla.org/ru/docs/Web/CSS/Specificity' target='_blank'>Специфичность (MDN)</a>"
    },
    {
      "id": 3,
      "text": "Что такое CSS?",
      "hasOptions": false,
      "answer": "CSS (Cascading Style Sheets) - это язык стилей, используемый для описания внешнего вида и форматирования документа, написанного на языке разметки, таком как HTML. CSS позволяет разработчикам управлять макетом, шрифтами, цветами и другими стилистическими аспектами веб-страницы."
    },
    {
      "id": 4,
      "text": "Почему, как правило, лучше разместить подключение CSS в <head>, а <script> перед тэгом </body>? Знаете ли вы какие-либо исключения, приведите примеры?",
      "hasOptions": false,
      "answer": "Стили рекомендуется подключать в head для того, чтобы страница как можно быстрее приняла свой внешний вид. Скрипты подключенные в head могут затормозить этот процесс, в связи с этим их рекомендуется подключать перед закрывающим тегом body. Исключением являются скрипты аналитики, для определения количества посетителей, которые не дождались загрузки страницы. В этом случае скрипт должен быть подключен в head."
    },
    {
      "id": 5,
      "text": "Что делает свойство 'z-index' в CSS?",
      "hasOptions": false,
      "answer": "Свойство 'z-index' в CSS контролирует стековый порядок элементов по оси Z. Элемент с большим значением 'z-index' будет отображаться поверх элемента с меньшим значением 'z-index'."
    },
    {
      "id": 6,
      "text": "Какие есть способы отцентровать div?",
      "hasOptions": false,
      "answer": "Существует несколько способов отцентровать div в CSS, вот некоторые из них: \n1. Использование свойств margin и auto: `margin: 0 auto;`.\n2. Использование Flexbox: `display: flex; justify-content: center; align-items: center;`.\n3. Использование Grid Layout: `display: grid; place-items: center;`.\n4. Использование свойств text-align и inline-block: `text-align: center;` на родительском элементе и `display: inline-block;` на самом div.`."
    },
    {
      "id": 7,
      "text": "Что такое 'комбинаторы' в CSS, и какие виды комбинаторов существуют?",
      "hasOptions": false,
      "answer": "Комбинаторы - это специальные символы, которые определяют отношение между элементами в CSS-селекторе. В CSS существует несколько видов комбинаторов, включая пробел, '>', '+', '~' и ':'. Комбинаторы позволяют выбирать элементы в зависимости от их отношения к другим элементам."
    },
    {
      "id": 8,
      "text": "Что такое 'классификация специфичности' (specificity) в CSS, и как она влияет на приоритетность правил стилей?",
      "hasOptions": false,
      "answer": "Специфичность - это метод определения приоритетности CSS-правил. Она базируется на количестве элементов, классов и идентификаторов в селекторе. Чем более специфичен селектор, тем выше его приоритет. Специфичность используется для разрешения конфликтов между правилами и определения, какие стили будут применены к элементу."
    },
    {
      "id": 9,
      "text": "Как работает 'наследование стилей' (style inheritance) в CSS, и какие свойства обычно наследуются от родительских элементов?",
      "hasOptions": false,
      "answer": "Наследование стилей - это механизм, при котором дочерние элементы могут наследовать определенные стили от своих родительских элементов. Обычно наследуются свойства, относящиеся к тексту, такие как шрифт, размер текста, цвет и стиль. Однако, не все свойства наследуются, и наследование может быть переопределено внутренними стилями элемента."
    },
    {
      "id": 10,
      "text": "Что такое 'псевдоэлементы' (pseudo-elements) в CSS, и какие псевдоэлементы существуют?",
      "hasOptions": false,
      "answer": "Псевдоэлементы - это специальные селекторы в CSS, которые позволяют добавлять стили к определенным частям элемента. Некоторые из популярных псевдоэлементов включают '::before' и '::after' для добавления контента перед или после элемента, '::first-line' и '::first-letter' для стилизации первой строки или первой буквы текста, '::selection' для стилизации выделенного текста и другие."
    },
    {
      "id": 11,
      "text": "Что такое 'гибкая (резиновая) вёрстка' (flexible layout) в CSS, и какие свойства и контейнеры используются для создания гибких макетов?",
      "hasOptions": false,
      "answer": "Гибкая вёрстка - это методика создания веб-макетов, которые могут адаптироваться к разным размерам экранов и устройствам. Она основана на свойствах 'display: flex' и 'display: grid', а также на свойствах, таких как 'flex-grow', 'flex-shrink', 'flex-basis', 'grid-template-columns' и 'grid-template-rows'. Гибкая вёрстка позволяет легко создавать адаптивные макеты."
    },
    {
      "id": 12,
      "text": "Что такое 'префиксы браузеров' (browser prefixes) и для чего они используются в CSS?",
      "hasOptions": false,
      "answer": "Префиксы браузера - это дополнительные префиксы, добавляемые к CSS-свойствам, чтобы обеспечить совместимость с разными браузерами. Они используются для применения экспериментальных или нестандартных свойств в браузерах, которые пока не поддерживают их без префиксов. Примеры префиксов включают '-webkit-', '-moz-', '-ms-' и '-o-'."
    },
    {
      "id": 13,
      "text": "Что такое 'каскадность' (cascading) в CSS, и какие приоритеты устанавливаются для стилей при разрешении конфликтов?",
      "hasOptions": false,
      "answer": "Каскадность - это процесс разрешения конфликтов между CSS-правилами. Приоритеты стилей определяются на основе специфичности селекторов, порядка в таблице стилей и важности стилей. Важность устанавливается с помощью ключевых слов, таких как '!important'. Если есть конфликт, браузер применяет стиль с более высокой специфичностью и/или важностью."
    },
    {
      "id": 14,
      "text": "Как работает 'анимация' (animation) в CSS, и какие свойства и ключевые кадры используются для создания анимированных эффектов?",
      "hasOptions": false,
      "answer": "Анимация - это способ создания движения и изменения веб-элементов с использованием CSS. Для создания анимации используются свойства 'animation-name', 'animation-duration', 'animation-timing-function', 'animation-iteration-count' и другие. Ключевые кадры определяют состояния элемента в разные моменты времени."
    },
    {
      "id": 15,
      "text": "Какие методы 'медиазапросов' (media queries) используются для создания адаптивных макетов в CSS, и как они работают?",
      "hasOptions": false,
      "answer": "Медиазапросы - это специальные инструкции CSS, которые позволяют применять стили в зависимости от характеристик устройства или экрана, таких как ширина и высота экрана, ориентация и плотность пикселей. Некоторые методы медиазапросов включают 'max-width', 'min-width', 'orientation' и другие."
    },
    {
      "id": 16,
      "text": "Как создать 'псевдоклассы' (pseudo-classes) в CSS, и для чего они обычно используются?",
      "hasOptions": false,
      "answer": "Псевдоклассы - это специальные селекторы в CSS, которые применяют стили к элементам в зависимости от их состояния или взаимодействия с пользователем. Например, ':hover' применяет стили при наведении курсора, а ':active' при активации элемента. Псевдоклассы используются для создания интерактивных стилей и состояний элементов."
    },
    {
      "id": 18,
      "text": "Какой селектор выбирает все элементы .child, которые являются непосредственными дочерними элементами .parent?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": ".parent + .child", "isCorrect": false },
        { "id": 2, "text": ".parent ~ .child", "isCorrect": false },
        { "id": 3, "text": ".parent > .child", "isCorrect": true },
        { "id": 4, "text": ".parent .child", "isCorrect": false }
      ]
    },
    {
      "id": 19,
      "text": "Какой селектор CSS выбирает все элементы, которые имеют указанный атрибут, начинающийся с определенной строки?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "[attr=value]", "isCorrect": false },
        { "id": 2, "text": "[attr~=value]", "isCorrect": false },
        { "id": 3, "text": "[attr|=value]", "isCorrect": false },
        { "id": 4, "text": "[attr^=value]", "isCorrect": true }
      ]
    },
    {
      "id": 20,
      "text": "Какой селектор CSS выбирает все элементы, которые имеют указанный атрибут, заканчивающийся определенной строкой?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "[attr=value]", "isCorrect": false },
        { "id": 2, "text": "[attr~=value]", "isCorrect": false },
        { "id": 3, "text": "[attr|=value]", "isCorrect": false },
        { "id": 4, "text": "[attr$=value]", "isCorrect": true }
      ]
    },
    {
      "id": 21,
      "text": "Что такое 'флексбокс' (Flexbox) в CSS, и какие свойства используются для создания гибких макетов?",
      "hasOptions": false,
      "answer": "Флексбокс - это модуль CSS, который предоставляет мощные инструменты для создания гибких и адаптивных макетов. Некоторые из основных свойств флексбокса включают 'display: flex', 'flex-direction', 'justify-content', 'align-items' и 'flex-grow'. Они позволяют легко управлять распределением и выравниванием элементов в контейнере."
    },
    {
      "id": 22,
      "text": "Что такое 'псевдоэлемент ::before' и ::after' в CSS, и для чего они обычно используются?",
      "hasOptions": false,
      "answer": "Псевдоэлементы '::before' и '::after' позволяют добавлять дополнительное содержимое перед или после элемента на веб-странице. Они обычно используются для создания декоративных элементов, разделителей, иконок или специальных стилей, не добавляя дополнительных HTML-элементов в разметку."
    },
    {
      "id": 23,
      "text": "Как работает 'грид' (Grid) в CSS, и какие свойства используются для создания сетчатых макетов?",
      "hasOptions": false,
      "answer": "CSS Grid Layout - это модуль CSS, который позволяет создавать сложные сетчатые макеты с помощью свойств, таких как 'display: grid', 'grid-template-columns', 'grid-template-rows', 'grid-gap' и других. Он позволяет легко управлять расположением и размерами ячеек сетки."
    },
    {
      "id": 24,
      "text": "Что такое 'медиазапросы' (media queries) и как они используются для создания адаптивных макетов?",
      "hasOptions": false,
      "answer": "Медиазапросы - это инструкции CSS, которые позволяют применять стили в зависимости от характеристик экрана или устройства, таких как ширина экрана, ориентация и разрешение. Они используются для создания адаптивных макетов, которые могут адекватно отображаться на разных устройствах и разрешениях экранов."
    },
    {
      "id": 26,
      "text": "Что такое 'анимация ключевых кадров' (keyframe animation) в CSS, и какие свойства используются для создания сложных анимаций?",
      "hasOptions": false,
      "answer": "Анимация ключевых кадров - это методика создания сложных анимаций в CSS путем определения ключевых кадров и их состояний. Для создания анимаций ключевых кадров используются свойства 'animation-name', 'animation-duration', 'animation-timing-function', 'animation-iteration-count' и ключевые кадры с помощью '@keyframes'."
    },
    {
      "id": 27,
      "text": "Что такое 'генерация контента' (content generation) с помощью CSS, и как оно может быть применено?",
      "hasOptions": false,
      "answer": "Генерация контента - это способ добавления текста или контента к элементу в CSS с помощью свойства 'content'. Оно часто используется с псевдоэлементами '::before' и '::after' для создания дополнительных элементов или декорации. Генерация контента может быть применена для добавления иконок, чисел, маркеров и других элементов в дизайне."
    },
    {
      "id": 28,
      "text": "Как работает 'комбинатор ' ~' в CSS, и для чего он обычно используется?",
      "hasOptions": false,
      "answer": "Комбинатор ' ~' в CSS используется для выбора всех элементов, которые идут после указанного элемента, но находятся внутри того же родительского элемента. Он обычно используется для стилизации последующих элементов с теми же родительскими элементами, когда нет необходимости в точном совпадении селекторов."
    },
    {
      "id": 29,
      "text": "Что такое 'смешивание (blending)' в CSS, и какие свойства используются для настройки смешивания элементов?",
      "hasOptions": false,
      "answer": "Смешивание - это техника, позволяющая создавать сложные эффекты путем комбинирования цветов и элементов на веб-странице. Для настройки смешивания используются свойства 'mix-blend-mode' и 'background-blend-mode', которые определяют, как цвета и элементы будут взаимодействовать друг с другом."
    },
    {
      "id": 30,
      "text": "Что такое 'переменные CSS' (CSS variables) и как они могут быть использованы для упрощения стилизации веб-страниц?",
      "hasOptions": false,
      "answer": "Переменные CSS - это именованные значения, которые можно использовать повторно в стилях CSS. Они объявляются с помощью свойства 'var' и могут быть использованы для хранения цветов, размеров, отступов и других значений. Переменные упрощают стилизацию и обеспечивают ее легкость изменения."
    },
    {
      "id": 31,
      "text": "Что такое 'селекторы атрибутов' (attribute selectors) в CSS, и как они могут быть использованы?",
      "hasOptions": false,
      "answer": "Селекторы атрибутов - это часть CSS-селекторов, которая позволяет выбирать элементы на основе атрибутов и их значений. Например, '[data-attribute]' выберет элементы с определенным атрибутом, а '[data-attribute=value]' выберет элементы с конкретным значением атрибута. Селекторы атрибутов полезны для стилизации элементов, основанной на их атрибутах."
    },
    {
      "id": 32,
      "text": "Что такое 'контекстный селектор' (contextual selector) в CSS, и как он работает?",
      "hasOptions": false,
      "answer": "Контекстный селектор - это специальный вид селектора, который выбирает элементы в зависимости от их отношения к другим элементам внутри контекста. Например, 'parent > child' выберет 'child' только если он является прямым потомком 'parent'. Контекстные селекторы обеспечивают более точное управление стилями в определенных контекстах."
    },
    {
      "id": 33,
      "text": "Что такое 'свойство transform' в CSS, и как оно может быть использовано для преобразования элементов?",
      "hasOptions": false,
      "answer": "Свойство 'transform' в CSS используется для преобразования элементов, изменения их размера, положения и формы. Оно позволяет выполнять трансформации, такие как вращение, масштабирование, сдвиг и наклон элементов. Свойство 'transform' полезно для создания анимаций и визуальных эффектов."
    },
    {
      "id": 34,
      "text": "Что такое 'контекст стиля' (style context) в CSS, и какие правила влияют на стили элемента?",
      "hasOptions": false,
      "answer": "Контекст стиля - это набор правил CSS, который влияет на стили элемента. Этот набор правил включает в себя стили, определенные во внешних таблицах стилей (CSS-файлах), стили, определенные внутри элемента (встроенные стили), и стили, определенные с помощью атрибутов 'style'. Правила применяются в порядке приоритетности и наследования."
    },
    {
      "id": 35,
      "text": "Что такое 'создание градиента' (gradient) в CSS, и какие виды градиентов поддерживаются?",
      "hasOptions": false,
      "answer": "Создание градиента - это методика добавления плавного перехода между цветами или оттенками на фоне элемента. CSS поддерживает линейные и радиальные градиенты. Линейные градиенты могут быть вертикальными, горизонтальными или под углом, а радиальные градиенты имеют радиусный центр."
    },
    {
      "id": 36,
      "text": "Что такое 'свойство opacity' в CSS, и как оно влияет на прозрачность элементов?",
      "hasOptions": false,
      "answer": "Свойство 'opacity' в CSS определяет уровень прозрачности элемента. Значение 0 означает полную прозрачность, а значение 1 - полную непрозрачность. Значения между 0 и 1 определяют степень прозрачности элемента. Свойство 'opacity' влияет на видимость элемента и всех его дочерних элементов."
    },
    {
      "id": 37,
      "text": "Что такое 'селекторы потомков' (descendant selectors) в CSS, и как они работают?",
      "hasOptions": false,
      "answer": "Селекторы потомков - это часть CSS-селекторов, которые позволяют выбирать элементы, являющиеся потомками определенного элемента. Например, 'ancestor descendant' выберет элементы 'descendant', которые являются потомками элемента 'ancestor'. Селекторы потомков используются для стилизации конкретных элементов внутри других элементов."
    },
    {
      "id": 38,
      "text": "Что такое 'свойство overflow (переполнение)' в CSS, и как оно влияет на отображение содержимого в контейнерах?",
      "hasOptions": false,
      "answer": "Свойство 'overflow' в CSS определяет, как отображается содержимое, которое не помещается внутри контейнера. Оно может иметь значения 'visible' (по умолчанию), 'hidden', 'scroll' и 'auto'. 'visible' позволяет содержимому выходить за пределы контейнера, 'hidden' скрывает часть содержимого, а 'scroll' и 'auto' добавляют полосы прокрутки при необходимости."
    },
    {
      "id": 39,
      "text": "Что такое 'компоновка (layout)' в CSS, и какие методы используются для создания сложных макетов?",
      "hasOptions": false,
      "answer": "Компоновка - это процесс размещения и организации элементов на веб-странице. Для создания сложных макетов в CSS используются методы, такие как 'float', 'position', 'flexbox', 'grid' и 'сетчатые макеты'. Каждый из этих методов предоставляет уникальные возможности для макетирования и оформления страницы."
    },
    {
      "id": 40,
      "text": "Что такое 'свойство box-sizing' в CSS, и как оно влияет на размеры элементов в макете?",
      "hasOptions": false,
      "answer": "Свойство 'box-sizing' в CSS определяет, какие значения ширины и высоты элемента включают в себя границы и поля (padding). Оно может иметь значения 'content-box' (по умолчанию) и 'border-box'. 'content-box' учитывает только контент, а 'border-box' включает в себя границы и поля, что облегчает управление размерами элементов."
    },
    {
      "id": 41,
      "text": "Что такое 'методология БЭМ' (Block-Element-Modifier), и как она используется для структурирования CSS-кода?",
      "hasOptions": false,
      "answer": "Методология БЭМ - это способ организации CSS-кода, который основан на разделении структуры веб-страницы на блоки (blocks), элементы (elements) и модификаторы (modifiers). Это помогает создать чистую и поддерживаемую кодовую базу, упрощает совместную разработку и обеспечивает легкость стилизации элементов."
    },
    {
      "id": 42,
      "text": "Какой метод компоновки используется для создания гибких макетов в CSS?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Float", "isCorrect": false },
        { "id": 2, "text": "Flexbox", "isCorrect": true },
        { "id": 3, "text": "Position", "isCorrect": false },
        { "id": 4, "text": "Box-sizing", "isCorrect": false }
      ]
    },
    {
      "id": 43,
      "text": "Что такое 'псевдокласс' в CSS?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Специальный класс, который необходимо добавить в HTML-код", "isCorrect": false },
        { "id": 2, "text": "Селектор, который выбирает элементы в зависимости от их состояния или взаимодействия", "isCorrect": true },
        { "id": 3, "text": "Элемент, имеющий несколько классов", "isCorrect": false },
        { "id": 4, "text": "Специальный элемент, который создается с помощью CSS", "isCorrect": false }
      ]
    },
    {
      "id": 44,
      "text": "Какое значение свойства 'box-sizing' включает в себя границы и поля элемента при расчете размеров?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "content-box", "isCorrect": false },
        { "id": 2, "text": "border-box", "isCorrect": true },
        { "id": 3, "text": "padding-box", "isCorrect": false },
        { "id": 4, "text": "margin-box", "isCorrect": false }
      ]
    },
    {
      "id": 45,
      "text": "Какое значение свойства 'overflow' добавляет полосы прокрутки при необходимости?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "visible", "isCorrect": false },
        { "id": 2, "text": "hidden", "isCorrect": false },
        { "id": 3, "text": "scroll", "isCorrect": true },
        { "id": 4, "text": "auto", "isCorrect": true }
      ]
    },
    {
      "id": 46,
      "text": "Как работает методология БЭМ в организации CSS-кода?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Она не используется в CSS", "isCorrect": false },
        { "id": 2, "text": "Она разделяет структуру веб-страницы на блоки, элементы и модификаторы", "isCorrect": true },
        { "id": 3, "text": "Она предоставляет только готовые CSS-стили", "isCorrect": false },
        { "id": 4, "text": "Она основана на использовании единой метки 'style'", "isCorrect": false }
      ]
    },
    {
      "id": 47,
      "text": "Какой селектор в CSS позволяет выбирать элементы на основе атрибутов и их значений?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Descendant selector", "isCorrect": false },
        { "id": 2, "text": "Pseudo-class", "isCorrect": false },
        { "id": 3, "text": "Attribute selector", "isCorrect": true },
        { "id": 4, "text": "Contextual selector", "isCorrect": false }
      ]
    },
    {
      "id": 48,
      "text": "Какой селектор в CSS выбирает элементы в зависимости от их отношения к другим элементам внутри контекста?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Descendant selector", "isCorrect": false },
        { "id": 2, "text": "Pseudo-class", "isCorrect": false },
        { "id": 3, "text": "Attribute selector", "isCorrect": false },
        { "id": 4, "text": "Contextual selector", "isCorrect": true }
      ]
    },
    {
      "id": 49,
      "text": "Какое свойство в CSS позволяет изменять размер, положение и форму элементов?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Opacity", "isCorrect": false },
        { "id": 2, "text": "Overflow", "isCorrect": false },
        { "id": 3, "text": "Transform", "isCorrect": true },
        { "id": 4, "text": "Blend mode", "isCorrect": false }
      ]
    },
    {
      "id": 50,
      "text": "Какие правила влияют на стили элемента в CSS?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Только стили, определенные внутри элемента (встроенные стили)", "isCorrect": false },
        { "id": 2, "text": "Только стили, определенные во внешних таблицах стилей (CSS-файлах)", "isCorrect": false },
        { "id": 3, "text": "Строго в порядке наследования", "isCorrect": false },
        { "id": 4, "text": "Все вышеперечисленное", "isCorrect": true }
      ]
    },
    {
      "id": 51,
      "text": "Какие виды градиентов поддерживаются в CSS?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Только линейные градиенты", "isCorrect": false },
        { "id": 2, "text": "Только радиальные градиенты", "isCorrect": false },
        { "id": 3, "text": "Линейные и радиальные градиенты", "isCorrect": true },
        { "id": 4, "text": "Градиенты не поддерживаются в CSS", "isCorrect": false }
      ]
    },
    {
      "id": 52,
      "text": "Какой метод компоновки используется для создания двумерных макетов в CSS?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Float", "isCorrect": false },
        { "id": 2, "text": "Flexbox", "isCorrect": false },
        { "id": 3, "text": "Grid", "isCorrect": true },
        { "id": 4, "text": "Position", "isCorrect": false }
      ]
    },
    {
      "id": 53,
      "text": "Какие правила влияют на стили элемента в CSS?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Только стили, определенные внутри элемента (встроенные стили)", "isCorrect": false },
        { "id": 2, "text": "Только стили, определенные во внешних таблицах стилей (CSS-файлах)", "isCorrect": false },
        { "id": 3, "text": "Все стили, в порядке наследования и приоритетности", "isCorrect": true },
        { "id": 4, "text": "Случайные стили, не зависящие от порядка", "isCorrect": false }
      ]
    },
    {
      "id": 54,
      "text": "Какой селектор в CSS выбирает элементы на основе их отношения к другим элементам внутри контекста?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Descendant selector", "isCorrect": false },
        { "id": 2, "text": "Pseudo-class", "isCorrect": false },
        { "id": 3, "text": "Attribute selector", "isCorrect": false },
        { "id": 4, "text": "Contextual selector", "isCorrect": true }
      ]
    },
    {
      "id": 55,
      "text": "Какой селектор в CSS позволяет выбирать все элементы, вложенные внутри другого элемента?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Descendant selector", "isCorrect": true },
        { "id": 2, "text": "Pseudo-class", "isCorrect": false },
        { "id": 3, "text": "Attribute selector", "isCorrect": false },
        { "id": 4, "text": "Contextual selector", "isCorrect": false }
      ]
    },
    {
      "id": 56,
      "text": "Какое свойство в CSS позволяет создавать градиентные фоны?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "background-color", "isCorrect": false },
        { "id": 2, "text": "color", "isCorrect": false },
        { "id": 3, "text": "gradient", "isCorrect": false },
        { "id": 4, "text": "background-image", "isCorrect": true }
      ]
    },
    {
      "id": 57,
      "text": "Какие виды градиентов поддерживаются в CSS?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Только линейные градиенты", "isCorrect": false },
        { "id": 2, "text": "Только радиальные градиенты", "isCorrect": false },
        { "id": 3, "text": "Линейные и радиальные градиенты", "isCorrect": true },
        { "id": 4, "text": "Градиенты не поддерживаются в CSS", "isCorrect": false }
      ]
    },
    {
      "id": 58,
      "text": "В каких случаях есть смысл использовать функцию translate() вместо абсолютного позиционирования и наоборот ? И почему?",
      "hasOptions": false,
      "answer": "В случае создания анимаций, использование 2D-трансформаций вместо абсолютного позиционирования обычно обеспечивает большую частоту кадров за счёт более быстрого рендеринга. Свойство position имеет большее отношение к вёрстке, а не к визуальным эффектам и анимации, поэтому абсолютное позиционирование лучше использовать при необходимости статически разместить контент."
    }
       
  ],
  "javascript": [
    {
      "id": 1,
      "text": "Что такое чистая функция?",
      "hasOptions": false,
      "answer": "Это функция, которая возвращает одинаковый результат, когда вызывается с одним и тем же набором аргументов, а также не имеет побочных эффектов (side effects)"
    },
    {
      "id": 2,
      "text": "Что такое замыкание?",
      "hasOptions": false,
      "answer": "Замыкания – это способность функции запоминать лексическое окружение, в котором она была создана, то есть хранить в себе ссылку на это окружение и обращаться к нему.\n\n<a href='https://youtu.be/mI6Jcfsgma4?si=46DV3mXPF6mDTTPs' target='_blank'>Подробнейшее видео про замыкание</a>"
    },
    {
      "id": 3,
      "text": "let VS const: почему лучше использовать const, когда это возможно?",
      "hasOptions": false,
      "answer": "Использование const дает два преимущества:\n1) Безопасность: объявление переменных через const защищает от неожиданного изменения значения переменной в коде, что может часто приводит к ошибкам и неожиданному поведению программы.\n2) Читаемость: использование const позволяет читателю кода понимать, что значение переменной не будет изменяться в течение выполнения программы. Это делает код более понятным и уменьшает возможность ошибок.\n\nПодробнее: <a href='https://youtu.be/07FllcTRj84?si=q7v60ZvHYBoRSSen' target='_blank'>Видео про VAR/LET/CONST</a>"
    },
    {
      "id": 4,
      "text": "Что такое промисы (Promises) в JavaScript?",
      "hasOptions": false,
      "answer": "Промисы – это объекты, которые представляют результат асинхронной операции. Они могут находиться в одном из трех состояний: ожидание (pending), выполнено (fulfilled) или отклонено (rejected)."
    },
    {
      "id": 5,
      "text": "Что такое деструктуризация в JavaScript?",
      "hasOptions": false,
      "answer": "Деструктуризация позволяет извлекать отдельные свойства из объектов или элементы из массивов и присваивать их переменным в более удобной форме. Например, вот так мы можем одной строкой извлечь имя и адрес пользователя из объекта user:\n<code>const {name, address} = user;</code>"
    },
    {
      "id": 6,
      "text": "Что такое стрелочные функции в JavaScript?",
      "hasOptions": false,
      "answer": "Стрелочные функции — это синтаксически компактный способ записи функций в JavaScript, который не имеет своего собственного 'this'. Они часто используются для создания анонимных функций.\n\n<a href='https://youtu.be/nGVYdna4kq4?si=1k0J9F-MYxWCaq6M' target='_blank'>Подробное видео про функции в JS</a>"
    },
    {
      "id": 7,
      "text": "Что такое hoisting в JavaScript?",
      "hasOptions": false,
      "answer": "Hoisting — это механизм в JavaScript, при котором переменные и объявления функций перемещаются на верх своей области видимости перед выполнением кода."
    },
    {
      "id": 8,
      "text": "Какой метод используется для добавления элемента в массив?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "splice()", "isCorrect": false },
        { "id": 2, "text": "pop()", "isCorrect": false },
        { "id": 3, "text": "shift()", "isCorrect": false },
        { "id": 4, "text": "push()", "isCorrect": true }
      ]
    },
    {
      "id": 9,
      "text": "Какой объект представляет текущее окно браузера?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "document", "isCorrect": false },
        { "id": 2, "text": "screen", "isCorrect": false },
        { "id": 3, "text": "window", "isCorrect": true },
        { "id": 4, "text": "browser", "isCorrect": false }
      ]
    },
    {
      "id": 10,
      "text": "Какой оператор используется для сравнения на строгое равенство?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "==", "isCorrect": false },
        { "id": 2, "text": "===", "isCorrect": true },
        { "id": 3, "text": "=", "isCorrect": false },
        { "id": 4, "text": "!==", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Какой метод используется для удаления последнего элемента из массива?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "splice()", "isCorrect": false },
        { "id": 2, "text": "pop()", "isCorrect": true },
        { "id": 3, "text": "shift()", "isCorrect": false },
        { "id": 4, "text": "push()", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Какой метод в JavaScript используется для преобразования объекта в строку JSON?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "JSON.stringify()", "isCorrect": true },
        { "id": 2, "text": "JSON.parse()", "isCorrect": false },
        { "id": 3, "text": "JSON.toText()", "isCorrect": false },
        { "id": 4, "text": "JSON.toString()", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "Какой объект в JavaScript используется для работы с датой и временем?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Time", "isCorrect": false },
        { "id": 2, "text": "Date", "isCorrect": true },
        { "id": 3, "text": "Calendar", "isCorrect": false },
        { "id": 4, "text": "DateTime", "isCorrect": false }
      ]
    },
    {
      "id": 14,
      "text": "Какой метод массива в JavaScript используется для фильтрации элементов по определенному критерию?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "map()", "isCorrect": false },
        { "id": 2, "text": "filter()", "isCorrect": true },
        { "id": 3, "text": "reduce()", "isCorrect": false },
        { "id": 4, "text": "forEach()", "isCorrect": false }
      ]
    }
  ],
  "vue": [
    {
      "id": 1,
      "text": "Что такое реактивная переменная?",
      "hasOptions": false,
      "answer": "Это прокси-обертка над обычной, которая следит за её изменениями и регистрирует всех слушателей, которых надо оповестить об изменении переменной, чтобы они себя пересчитали."
    }
  ]
}
